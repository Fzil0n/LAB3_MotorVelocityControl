
LAB3_MotorVelocity_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005974  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08005b10  08005b10  00015b10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b60  08005b60  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005b60  08005b60  00015b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b68  08005b68  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b68  08005b68  00015b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b6c  08005b6c  00015b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005b70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000074  08005be4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08005be4  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d340  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b40  00000000  00000000  0002d3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0002ef28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  0002fb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001575f  00000000  00000000  000306d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d601  00000000  00000000  00045e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a234  00000000  00000000  00053430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd664  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003858  00000000  00000000  000dd6b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005af4 	.word	0x08005af4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	08005af4 	.word	0x08005af4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	0000      	movs	r0, r0
	...

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b5b0      	push	{r4, r5, r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f000 fd84 	bl	80019a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f940 	bl	8001124 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea4:	f000 fae6 	bl	8001474 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ea8:	f000 fac4 	bl	8001434 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000eac:	f000 fa98 	bl	80013e0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000eb0:	f000 fa26 	bl	8001300 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000eb4:	f000 f9a0 	bl	80011f8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8000eb8:	488b      	ldr	r0, [pc, #556]	; (80010e8 <main+0x250>)
 8000eba:	f002 f8ef 	bl	800309c <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, InCapBuffer, IC_BUFFER_SIZE);
 8000ebe:	2314      	movs	r3, #20
 8000ec0:	4a8a      	ldr	r2, [pc, #552]	; (80010ec <main+0x254>)
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4888      	ldr	r0, [pc, #544]	; (80010e8 <main+0x250>)
 8000ec6:	f002 fa9d 	bl	8003404 <HAL_TIM_IC_Start_DMA>

  HAL_TIM_Base_Start(&htim1);
 8000eca:	4889      	ldr	r0, [pc, #548]	; (80010f0 <main+0x258>)
 8000ecc:	f002 f8e6 	bl	800309c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4887      	ldr	r0, [pc, #540]	; (80010f0 <main+0x258>)
 8000ed4:	f002 f98c 	bl	80031f0 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint32_t timestamp = 0;
	  if (HAL_GetTick() >= timestamp)
 8000ed8:	f000 fdcc 	bl	8001a74 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	4b85      	ldr	r3, [pc, #532]	; (80010f4 <main+0x25c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	f0c0 80d9 	bcc.w	800109a <main+0x202>
	  {
		  timestamp = HAL_GetTick() + 10;
 8000ee8:	f000 fdc4 	bl	8001a74 <HAL_GetTick>
 8000eec:	4603      	mov	r3, r0
 8000eee:	330a      	adds	r3, #10
 8000ef0:	4a80      	ldr	r2, [pc, #512]	; (80010f4 <main+0x25c>)
 8000ef2:	6013      	str	r3, [r2, #0]
		  AvgRaisingEdgePeriod = IC_Cal_Period() * 0.000001;	//In second
 8000ef4:	f000 fb2c 	bl	8001550 <IC_Cal_Period>
 8000ef8:	ee10 3a10 	vmov	r3, s0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff facf 	bl	80004a0 <__aeabi_f2d>
 8000f02:	a367      	add	r3, pc, #412	; (adr r3, 80010a0 <main+0x208>)
 8000f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f08:	f7ff fb22 	bl	8000550 <__aeabi_dmul>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	460b      	mov	r3, r1
 8000f10:	4610      	mov	r0, r2
 8000f12:	4619      	mov	r1, r3
 8000f14:	f7ff fdec 	bl	8000af0 <__aeabi_d2f>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4a77      	ldr	r2, [pc, #476]	; (80010f8 <main+0x260>)
 8000f1c:	6013      	str	r3, [r2, #0]
		  AvgMotorVelocity = 1.0/(AvgRaisingEdgePeriod * 12.0) * 60 / 64;	//rpm
 8000f1e:	4b76      	ldr	r3, [pc, #472]	; (80010f8 <main+0x260>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fabc 	bl	80004a0 <__aeabi_f2d>
 8000f28:	f04f 0200 	mov.w	r2, #0
 8000f2c:	4b73      	ldr	r3, [pc, #460]	; (80010fc <main+0x264>)
 8000f2e:	f7ff fb0f 	bl	8000550 <__aeabi_dmul>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	f04f 0000 	mov.w	r0, #0
 8000f3a:	4971      	ldr	r1, [pc, #452]	; (8001100 <main+0x268>)
 8000f3c:	f7ff fc32 	bl	80007a4 <__aeabi_ddiv>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4610      	mov	r0, r2
 8000f46:	4619      	mov	r1, r3
 8000f48:	f04f 0200 	mov.w	r2, #0
 8000f4c:	4b6d      	ldr	r3, [pc, #436]	; (8001104 <main+0x26c>)
 8000f4e:	f7ff faff 	bl	8000550 <__aeabi_dmul>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	4610      	mov	r0, r2
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	4b6a      	ldr	r3, [pc, #424]	; (8001108 <main+0x270>)
 8000f60:	f7ff fc20 	bl	80007a4 <__aeabi_ddiv>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4610      	mov	r0, r2
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f7ff fdc0 	bl	8000af0 <__aeabi_d2f>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4a66      	ldr	r2, [pc, #408]	; (800110c <main+0x274>)
 8000f74:	6013      	str	r3, [r2, #0]
		  switch (MotorControlEnable)
 8000f76:	4b66      	ldr	r3, [pc, #408]	; (8001110 <main+0x278>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d002      	beq.n	8000f84 <main+0xec>
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d006      	beq.n	8000f90 <main+0xf8>
 8000f82:	e08b      	b.n	800109c <main+0x204>
		  {
		  	  case 0:
		  		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);
 8000f84:	4b5a      	ldr	r3, [pc, #360]	; (80010f0 <main+0x258>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a62      	ldr	r2, [pc, #392]	; (8001114 <main+0x27c>)
 8000f8a:	6812      	ldr	r2, [r2, #0]
 8000f8c:	635a      	str	r2, [r3, #52]	; 0x34
			  break;
 8000f8e:	e085      	b.n	800109c <main+0x204>

		  	  case 1:

		  		  dutyCycleOut = (0.0027*pow(MotorSetRPM,4.0) - 0.0517*pow(MotorSetRPM,3.0) + 0.321*pow(MotorSetRPM,2.0) + 3.3019*MotorSetRPM + 8.9974)*10;
 8000f90:	4b61      	ldr	r3, [pc, #388]	; (8001118 <main+0x280>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fa83 	bl	80004a0 <__aeabi_f2d>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	ed9f 1b42 	vldr	d1, [pc, #264]	; 80010a8 <main+0x210>
 8000fa2:	ec43 2b10 	vmov	d0, r2, r3
 8000fa6:	f003 fe8b 	bl	8004cc0 <pow>
 8000faa:	ec51 0b10 	vmov	r0, r1, d0
 8000fae:	a340      	add	r3, pc, #256	; (adr r3, 80010b0 <main+0x218>)
 8000fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb4:	f7ff facc 	bl	8000550 <__aeabi_dmul>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	4614      	mov	r4, r2
 8000fbe:	461d      	mov	r5, r3
 8000fc0:	4b55      	ldr	r3, [pc, #340]	; (8001118 <main+0x280>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fa6b 	bl	80004a0 <__aeabi_f2d>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	ed9f 1b3a 	vldr	d1, [pc, #232]	; 80010b8 <main+0x220>
 8000fd2:	ec43 2b10 	vmov	d0, r2, r3
 8000fd6:	f003 fe73 	bl	8004cc0 <pow>
 8000fda:	ec51 0b10 	vmov	r0, r1, d0
 8000fde:	a338      	add	r3, pc, #224	; (adr r3, 80010c0 <main+0x228>)
 8000fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe4:	f7ff fab4 	bl	8000550 <__aeabi_dmul>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4620      	mov	r0, r4
 8000fee:	4629      	mov	r1, r5
 8000ff0:	f7ff f8f6 	bl	80001e0 <__aeabi_dsub>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4614      	mov	r4, r2
 8000ffa:	461d      	mov	r5, r3
 8000ffc:	4b46      	ldr	r3, [pc, #280]	; (8001118 <main+0x280>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fa4d 	bl	80004a0 <__aeabi_f2d>
 8001006:	4602      	mov	r2, r0
 8001008:	460b      	mov	r3, r1
 800100a:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 80010c8 <main+0x230>
 800100e:	ec43 2b10 	vmov	d0, r2, r3
 8001012:	f003 fe55 	bl	8004cc0 <pow>
 8001016:	ec51 0b10 	vmov	r0, r1, d0
 800101a:	a32d      	add	r3, pc, #180	; (adr r3, 80010d0 <main+0x238>)
 800101c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001020:	f7ff fa96 	bl	8000550 <__aeabi_dmul>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	4620      	mov	r0, r4
 800102a:	4629      	mov	r1, r5
 800102c:	f7ff f8da 	bl	80001e4 <__adddf3>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	4614      	mov	r4, r2
 8001036:	461d      	mov	r5, r3
 8001038:	4b37      	ldr	r3, [pc, #220]	; (8001118 <main+0x280>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fa2f 	bl	80004a0 <__aeabi_f2d>
 8001042:	a325      	add	r3, pc, #148	; (adr r3, 80010d8 <main+0x240>)
 8001044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001048:	f7ff fa82 	bl	8000550 <__aeabi_dmul>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4620      	mov	r0, r4
 8001052:	4629      	mov	r1, r5
 8001054:	f7ff f8c6 	bl	80001e4 <__adddf3>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4610      	mov	r0, r2
 800105e:	4619      	mov	r1, r3
 8001060:	a31f      	add	r3, pc, #124	; (adr r3, 80010e0 <main+0x248>)
 8001062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001066:	f7ff f8bd 	bl	80001e4 <__adddf3>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	4610      	mov	r0, r2
 8001070:	4619      	mov	r1, r3
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	4b29      	ldr	r3, [pc, #164]	; (800111c <main+0x284>)
 8001078:	f7ff fa6a 	bl	8000550 <__aeabi_dmul>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fd14 	bl	8000ab0 <__aeabi_d2uiz>
 8001088:	4603      	mov	r3, r0
 800108a:	4a25      	ldr	r2, [pc, #148]	; (8001120 <main+0x288>)
 800108c:	6013      	str	r3, [r2, #0]
		  		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycleOut);
 800108e:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <main+0x258>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a23      	ldr	r2, [pc, #140]	; (8001120 <main+0x288>)
 8001094:	6812      	ldr	r2, [r2, #0]
 8001096:	635a      	str	r2, [r3, #52]	; 0x34
		  	  break;
 8001098:	e000      	b.n	800109c <main+0x204>
		  }


	  }
 800109a:	bf00      	nop
  {
 800109c:	e71c      	b.n	8000ed8 <main+0x40>
 800109e:	bf00      	nop
 80010a0:	a0b5ed8d 	.word	0xa0b5ed8d
 80010a4:	3eb0c6f7 	.word	0x3eb0c6f7
 80010a8:	00000000 	.word	0x00000000
 80010ac:	40100000 	.word	0x40100000
 80010b0:	765fd8ae 	.word	0x765fd8ae
 80010b4:	3f661e4f 	.word	0x3f661e4f
 80010b8:	00000000 	.word	0x00000000
 80010bc:	40080000 	.word	0x40080000
 80010c0:	226809d5 	.word	0x226809d5
 80010c4:	3faa786c 	.word	0x3faa786c
 80010c8:	00000000 	.word	0x00000000
 80010cc:	40000000 	.word	0x40000000
 80010d0:	95810625 	.word	0x95810625
 80010d4:	3fd48b43 	.word	0x3fd48b43
 80010d8:	8c154c98 	.word	0x8c154c98
 80010dc:	400a6a4a 	.word	0x400a6a4a
 80010e0:	367a0f91 	.word	0x367a0f91
 80010e4:	4021feab 	.word	0x4021feab
 80010e8:	200000d8 	.word	0x200000d8
 80010ec:	200001c4 	.word	0x200001c4
 80010f0:	20000090 	.word	0x20000090
 80010f4:	20000228 	.word	0x20000228
 80010f8:	20000214 	.word	0x20000214
 80010fc:	40280000 	.word	0x40280000
 8001100:	3ff00000 	.word	0x3ff00000
 8001104:	404e0000 	.word	0x404e0000
 8001108:	40500000 	.word	0x40500000
 800110c:	20000218 	.word	0x20000218
 8001110:	2000021c 	.word	0x2000021c
 8001114:	20000000 	.word	0x20000000
 8001118:	20000220 	.word	0x20000220
 800111c:	40240000 	.word	0x40240000
 8001120:	20000224 	.word	0x20000224

08001124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b094      	sub	sp, #80	; 0x50
 8001128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112a:	f107 0320 	add.w	r3, r7, #32
 800112e:	2230      	movs	r2, #48	; 0x30
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f003 fdbc 	bl	8004cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001148:	2300      	movs	r3, #0
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <SystemClock_Config+0xcc>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	4a27      	ldr	r2, [pc, #156]	; (80011f0 <SystemClock_Config+0xcc>)
 8001152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001156:	6413      	str	r3, [r2, #64]	; 0x40
 8001158:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <SystemClock_Config+0xcc>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <SystemClock_Config+0xd0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a21      	ldr	r2, [pc, #132]	; (80011f4 <SystemClock_Config+0xd0>)
 800116e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <SystemClock_Config+0xd0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001180:	2302      	movs	r3, #2
 8001182:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001184:	2301      	movs	r3, #1
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001188:	2310      	movs	r3, #16
 800118a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118c:	2302      	movs	r3, #2
 800118e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001190:	2300      	movs	r3, #0
 8001192:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001194:	2310      	movs	r3, #16
 8001196:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001198:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800119c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800119e:	2304      	movs	r3, #4
 80011a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011a2:	2304      	movs	r3, #4
 80011a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a6:	f107 0320 	add.w	r3, r7, #32
 80011aa:	4618      	mov	r0, r3
 80011ac:	f001 fa8e 	bl	80026cc <HAL_RCC_OscConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011b6:	f000 fa3b 	bl	8001630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ba:	230f      	movs	r3, #15
 80011bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011be:	2302      	movs	r3, #2
 80011c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	2102      	movs	r1, #2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f001 fcf0 	bl	8002bbc <HAL_RCC_ClockConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011e2:	f000 fa25 	bl	8001630 <Error_Handler>
  }
}
 80011e6:	bf00      	nop
 80011e8:	3750      	adds	r7, #80	; 0x50
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40007000 	.word	0x40007000

080011f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b092      	sub	sp, #72	; 0x48
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
 8001218:	615a      	str	r2, [r3, #20]
 800121a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2220      	movs	r2, #32
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f003 fd44 	bl	8004cb0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001228:	4b33      	ldr	r3, [pc, #204]	; (80012f8 <MX_TIM1_Init+0x100>)
 800122a:	4a34      	ldr	r2, [pc, #208]	; (80012fc <MX_TIM1_Init+0x104>)
 800122c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 800122e:	4b32      	ldr	r3, [pc, #200]	; (80012f8 <MX_TIM1_Init+0x100>)
 8001230:	2253      	movs	r2, #83	; 0x53
 8001232:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001234:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <MX_TIM1_Init+0x100>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800123a:	4b2f      	ldr	r3, [pc, #188]	; (80012f8 <MX_TIM1_Init+0x100>)
 800123c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001240:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001242:	4b2d      	ldr	r3, [pc, #180]	; (80012f8 <MX_TIM1_Init+0x100>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001248:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <MX_TIM1_Init+0x100>)
 800124a:	2200      	movs	r2, #0
 800124c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124e:	4b2a      	ldr	r3, [pc, #168]	; (80012f8 <MX_TIM1_Init+0x100>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001254:	4828      	ldr	r0, [pc, #160]	; (80012f8 <MX_TIM1_Init+0x100>)
 8001256:	f001 ff7b 	bl	8003150 <HAL_TIM_PWM_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001260:	f000 f9e6 	bl	8001630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001264:	2300      	movs	r3, #0
 8001266:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800126c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001270:	4619      	mov	r1, r3
 8001272:	4821      	ldr	r0, [pc, #132]	; (80012f8 <MX_TIM1_Init+0x100>)
 8001274:	f003 f970 	bl	8004558 <HAL_TIMEx_MasterConfigSynchronization>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800127e:	f000 f9d7 	bl	8001630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001282:	2360      	movs	r3, #96	; 0x60
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 8001286:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800128a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800128c:	2300      	movs	r3, #0
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001290:	2300      	movs	r3, #0
 8001292:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001298:	2300      	movs	r3, #0
 800129a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800129c:	2300      	movs	r3, #0
 800129e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a4:	2200      	movs	r2, #0
 80012a6:	4619      	mov	r1, r3
 80012a8:	4813      	ldr	r0, [pc, #76]	; (80012f8 <MX_TIM1_Init+0x100>)
 80012aa:	f002 fae3 	bl	8003874 <HAL_TIM_PWM_ConfigChannel>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80012b4:	f000 f9bc 	bl	8001630 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	4619      	mov	r1, r3
 80012da:	4807      	ldr	r0, [pc, #28]	; (80012f8 <MX_TIM1_Init+0x100>)
 80012dc:	f003 f9aa 	bl	8004634 <HAL_TIMEx_ConfigBreakDeadTime>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80012e6:	f000 f9a3 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012ea:	4803      	ldr	r0, [pc, #12]	; (80012f8 <MX_TIM1_Init+0x100>)
 80012ec:	f000 fa6a 	bl	80017c4 <HAL_TIM_MspPostInit>

}
 80012f0:	bf00      	nop
 80012f2:	3748      	adds	r7, #72	; 0x48
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000090 	.word	0x20000090
 80012fc:	40010000 	.word	0x40010000

08001300 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001306:	f107 0318 	add.w	r3, r7, #24
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800131e:	463b      	mov	r3, r7
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800132a:	4b2c      	ldr	r3, [pc, #176]	; (80013dc <MX_TIM2_Init+0xdc>)
 800132c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001330:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001332:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <MX_TIM2_Init+0xdc>)
 8001334:	2253      	movs	r2, #83	; 0x53
 8001336:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001338:	4b28      	ldr	r3, [pc, #160]	; (80013dc <MX_TIM2_Init+0xdc>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800133e:	4b27      	ldr	r3, [pc, #156]	; (80013dc <MX_TIM2_Init+0xdc>)
 8001340:	f04f 32ff 	mov.w	r2, #4294967295
 8001344:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001346:	4b25      	ldr	r3, [pc, #148]	; (80013dc <MX_TIM2_Init+0xdc>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134c:	4b23      	ldr	r3, [pc, #140]	; (80013dc <MX_TIM2_Init+0xdc>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001352:	4822      	ldr	r0, [pc, #136]	; (80013dc <MX_TIM2_Init+0xdc>)
 8001354:	f001 fe52 	bl	8002ffc <HAL_TIM_Base_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800135e:	f000 f967 	bl	8001630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001366:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001368:	f107 0318 	add.w	r3, r7, #24
 800136c:	4619      	mov	r1, r3
 800136e:	481b      	ldr	r0, [pc, #108]	; (80013dc <MX_TIM2_Init+0xdc>)
 8001370:	f002 fb42 	bl	80039f8 <HAL_TIM_ConfigClockSource>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800137a:	f000 f959 	bl	8001630 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800137e:	4817      	ldr	r0, [pc, #92]	; (80013dc <MX_TIM2_Init+0xdc>)
 8001380:	f001 ffe6 	bl	8003350 <HAL_TIM_IC_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800138a:	f000 f951 	bl	8001630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	4619      	mov	r1, r3
 800139c:	480f      	ldr	r0, [pc, #60]	; (80013dc <MX_TIM2_Init+0xdc>)
 800139e:	f003 f8db 	bl	8004558 <HAL_TIMEx_MasterConfigSynchronization>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80013a8:	f000 f942 	bl	8001630 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013ac:	2300      	movs	r3, #0
 80013ae:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013b0:	2301      	movs	r3, #1
 80013b2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013bc:	463b      	mov	r3, r7
 80013be:	2200      	movs	r2, #0
 80013c0:	4619      	mov	r1, r3
 80013c2:	4806      	ldr	r0, [pc, #24]	; (80013dc <MX_TIM2_Init+0xdc>)
 80013c4:	f002 f9ba 	bl	800373c <HAL_TIM_IC_ConfigChannel>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80013ce:	f000 f92f 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	3728      	adds	r7, #40	; 0x28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200000d8 	.word	0x200000d8

080013e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <MX_USART2_UART_Init+0x4c>)
 80013e6:	4a12      	ldr	r2, [pc, #72]	; (8001430 <MX_USART2_UART_Init+0x50>)
 80013e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <MX_USART2_UART_Init+0x4c>)
 80013ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <MX_USART2_UART_Init+0x4c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <MX_USART2_UART_Init+0x4c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <MX_USART2_UART_Init+0x4c>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <MX_USART2_UART_Init+0x4c>)
 8001406:	220c      	movs	r2, #12
 8001408:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140a:	4b08      	ldr	r3, [pc, #32]	; (800142c <MX_USART2_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <MX_USART2_UART_Init+0x4c>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_USART2_UART_Init+0x4c>)
 8001418:	f003 f95e 	bl	80046d8 <HAL_UART_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001422:	f000 f905 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000180 	.word	0x20000180
 8001430:	40004400 	.word	0x40004400

08001434 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <MX_DMA_Init+0x3c>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a0b      	ldr	r2, [pc, #44]	; (8001470 <MX_DMA_Init+0x3c>)
 8001444:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <MX_DMA_Init+0x3c>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	2010      	movs	r0, #16
 800145c:	f000 fbf1 	bl	8001c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001460:	2010      	movs	r0, #16
 8001462:	f000 fc0a 	bl	8001c7a <HAL_NVIC_EnableIRQ>

}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800

08001474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	; 0x28
 8001478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <MX_GPIO_Init+0xd0>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a2c      	ldr	r2, [pc, #176]	; (8001544 <MX_GPIO_Init+0xd0>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <MX_GPIO_Init+0xd0>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	4b26      	ldr	r3, [pc, #152]	; (8001544 <MX_GPIO_Init+0xd0>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a25      	ldr	r2, [pc, #148]	; (8001544 <MX_GPIO_Init+0xd0>)
 80014b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b23      	ldr	r3, [pc, #140]	; (8001544 <MX_GPIO_Init+0xd0>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <MX_GPIO_Init+0xd0>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a1e      	ldr	r2, [pc, #120]	; (8001544 <MX_GPIO_Init+0xd0>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b1c      	ldr	r3, [pc, #112]	; (8001544 <MX_GPIO_Init+0xd0>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <MX_GPIO_Init+0xd0>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a17      	ldr	r2, [pc, #92]	; (8001544 <MX_GPIO_Init+0xd0>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <MX_GPIO_Init+0xd0>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2120      	movs	r1, #32
 80014fe:	4812      	ldr	r0, [pc, #72]	; (8001548 <MX_GPIO_Init+0xd4>)
 8001500:	f001 f8ca 	bl	8002698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001504:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800150a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800150e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4619      	mov	r1, r3
 800151a:	480c      	ldr	r0, [pc, #48]	; (800154c <MX_GPIO_Init+0xd8>)
 800151c:	f000 ff38 	bl	8002390 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001520:	2320      	movs	r3, #32
 8001522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001524:	2301      	movs	r3, #1
 8001526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4619      	mov	r1, r3
 8001536:	4804      	ldr	r0, [pc, #16]	; (8001548 <MX_GPIO_Init+0xd4>)
 8001538:	f000 ff2a 	bl	8002390 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800153c:	bf00      	nop
 800153e:	3728      	adds	r7, #40	; 0x28
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40023800 	.word	0x40023800
 8001548:	40020000 	.word	0x40020000
 800154c:	40020800 	.word	0x40020800

08001550 <IC_Cal_Period>:

/* USER CODE BEGIN 4 */

float IC_Cal_Period()
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
	uint32_t CurrDMAPtrInd = IC_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(htim2.hdma[1]);
 8001556:	4b32      	ldr	r3, [pc, #200]	; (8001620 <IC_Cal_Period+0xd0>)
 8001558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f1c3 0314 	rsb	r3, r3, #20
 8001562:	60fb      	str	r3, [r7, #12]

	uint32_t LastDMAInd = (CurrDMAPtrInd - 1 + IC_BUFFER_SIZE) % IC_BUFFER_SIZE;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f103 0213 	add.w	r2, r3, #19
 800156a:	4b2e      	ldr	r3, [pc, #184]	; (8001624 <IC_Cal_Period+0xd4>)
 800156c:	fba3 1302 	umull	r1, r3, r3, r2
 8001570:	0919      	lsrs	r1, r3, #4
 8001572:	460b      	mov	r3, r1
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	440b      	add	r3, r1
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	60bb      	str	r3, [r7, #8]

	uint32_t i = (LastDMAInd + IC_BUFFER_SIZE - 6) % IC_BUFFER_SIZE;
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	f103 020e 	add.w	r2, r3, #14
 8001584:	4b27      	ldr	r3, [pc, #156]	; (8001624 <IC_Cal_Period+0xd4>)
 8001586:	fba3 1302 	umull	r1, r3, r3, r2
 800158a:	0919      	lsrs	r1, r3, #4
 800158c:	460b      	mov	r3, r1
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	440b      	add	r3, r1
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	617b      	str	r3, [r7, #20]

	int32_t sumdiff = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	613b      	str	r3, [r7, #16]
	while(i != LastDMAInd)
 800159c:	e025      	b.n	80015ea <IC_Cal_Period+0x9a>
	{
		uint32_t firstCap = InCapBuffer[i];
 800159e:	4a22      	ldr	r2, [pc, #136]	; (8001628 <IC_Cal_Period+0xd8>)
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a6:	607b      	str	r3, [r7, #4]
		uint32_t nextCap = InCapBuffer[(i+1)%IC_BUFFER_SIZE];
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	1c59      	adds	r1, r3, #1
 80015ac:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <IC_Cal_Period+0xd4>)
 80015ae:	fba3 2301 	umull	r2, r3, r3, r1
 80015b2:	091a      	lsrs	r2, r3, #4
 80015b4:	4613      	mov	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	1aca      	subs	r2, r1, r3
 80015be:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <IC_Cal_Period+0xd8>)
 80015c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c4:	603b      	str	r3, [r7, #0]

		sumdiff += nextCap - firstCap;
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	1ad2      	subs	r2, r2, r3
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	4413      	add	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
		i = (i+1)%IC_BUFFER_SIZE;
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <IC_Cal_Period+0xd4>)
 80015d8:	fba3 1302 	umull	r1, r3, r3, r2
 80015dc:	0919      	lsrs	r1, r3, #4
 80015de:	460b      	mov	r3, r1
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	440b      	add	r3, r1
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	617b      	str	r3, [r7, #20]
	while(i != LastDMAInd)
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d1d5      	bne.n	800159e <IC_Cal_Period+0x4e>
	}
	return sumdiff/5.0;
 80015f2:	6938      	ldr	r0, [r7, #16]
 80015f4:	f7fe ff42 	bl	800047c <__aeabi_i2d>
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <IC_Cal_Period+0xdc>)
 80015fe:	f7ff f8d1 	bl	80007a4 <__aeabi_ddiv>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4610      	mov	r0, r2
 8001608:	4619      	mov	r1, r3
 800160a:	f7ff fa71 	bl	8000af0 <__aeabi_d2f>
 800160e:	4603      	mov	r3, r0
 8001610:	ee07 3a90 	vmov	s15, r3
}
 8001614:	eeb0 0a67 	vmov.f32	s0, s15
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200000d8 	.word	0x200000d8
 8001624:	cccccccd 	.word	0xcccccccd
 8001628:	200001c4 	.word	0x200001c4
 800162c:	40140000 	.word	0x40140000

08001630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001634:	b672      	cpsid	i
}
 8001636:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001638:	e7fe      	b.n	8001638 <Error_Handler+0x8>
	...

0800163c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <HAL_MspInit+0x4c>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	4a0f      	ldr	r2, [pc, #60]	; (8001688 <HAL_MspInit+0x4c>)
 800164c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001650:	6453      	str	r3, [r2, #68]	; 0x44
 8001652:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <HAL_MspInit+0x4c>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	603b      	str	r3, [r7, #0]
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_MspInit+0x4c>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a08      	ldr	r2, [pc, #32]	; (8001688 <HAL_MspInit+0x4c>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_MspInit+0x4c>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800167a:	2007      	movs	r0, #7
 800167c:	f000 fad6 	bl	8001c2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40023800 	.word	0x40023800

0800168c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0b      	ldr	r2, [pc, #44]	; (80016c8 <HAL_TIM_PWM_MspInit+0x3c>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d10d      	bne.n	80016ba <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <HAL_TIM_PWM_MspInit+0x40>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	4a09      	ldr	r2, [pc, #36]	; (80016cc <HAL_TIM_PWM_MspInit+0x40>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6453      	str	r3, [r2, #68]	; 0x44
 80016ae:	4b07      	ldr	r3, [pc, #28]	; (80016cc <HAL_TIM_PWM_MspInit+0x40>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80016ba:	bf00      	nop
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40010000 	.word	0x40010000
 80016cc:	40023800 	.word	0x40023800

080016d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f0:	d15c      	bne.n	80017ac <HAL_TIM_Base_MspInit+0xdc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	4b2f      	ldr	r3, [pc, #188]	; (80017b4 <HAL_TIM_Base_MspInit+0xe4>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	4a2e      	ldr	r2, [pc, #184]	; (80017b4 <HAL_TIM_Base_MspInit+0xe4>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6413      	str	r3, [r2, #64]	; 0x40
 8001702:	4b2c      	ldr	r3, [pc, #176]	; (80017b4 <HAL_TIM_Base_MspInit+0xe4>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b28      	ldr	r3, [pc, #160]	; (80017b4 <HAL_TIM_Base_MspInit+0xe4>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a27      	ldr	r2, [pc, #156]	; (80017b4 <HAL_TIM_Base_MspInit+0xe4>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b25      	ldr	r3, [pc, #148]	; (80017b4 <HAL_TIM_Base_MspInit+0xe4>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800172a:	2301      	movs	r3, #1
 800172c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2300      	movs	r3, #0
 8001738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800173a:	2301      	movs	r3, #1
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	481c      	ldr	r0, [pc, #112]	; (80017b8 <HAL_TIM_Base_MspInit+0xe8>)
 8001746:	f000 fe23 	bl	8002390 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 800174a:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <HAL_TIM_Base_MspInit+0xec>)
 800174c:	4a1c      	ldr	r2, [pc, #112]	; (80017c0 <HAL_TIM_Base_MspInit+0xf0>)
 800174e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <HAL_TIM_Base_MspInit+0xec>)
 8001752:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001756:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001758:	4b18      	ldr	r3, [pc, #96]	; (80017bc <HAL_TIM_Base_MspInit+0xec>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800175e:	4b17      	ldr	r3, [pc, #92]	; (80017bc <HAL_TIM_Base_MspInit+0xec>)
 8001760:	2200      	movs	r2, #0
 8001762:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001764:	4b15      	ldr	r3, [pc, #84]	; (80017bc <HAL_TIM_Base_MspInit+0xec>)
 8001766:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800176a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800176c:	4b13      	ldr	r3, [pc, #76]	; (80017bc <HAL_TIM_Base_MspInit+0xec>)
 800176e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001772:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <HAL_TIM_Base_MspInit+0xec>)
 8001776:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800177a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <HAL_TIM_Base_MspInit+0xec>)
 800177e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001782:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001784:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <HAL_TIM_Base_MspInit+0xec>)
 8001786:	2200      	movs	r2, #0
 8001788:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <HAL_TIM_Base_MspInit+0xec>)
 800178c:	2200      	movs	r2, #0
 800178e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001790:	480a      	ldr	r0, [pc, #40]	; (80017bc <HAL_TIM_Base_MspInit+0xec>)
 8001792:	f000 fa8d 	bl	8001cb0 <HAL_DMA_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 800179c:	f7ff ff48 	bl	8001630 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a06      	ldr	r2, [pc, #24]	; (80017bc <HAL_TIM_Base_MspInit+0xec>)
 80017a4:	625a      	str	r2, [r3, #36]	; 0x24
 80017a6:	4a05      	ldr	r2, [pc, #20]	; (80017bc <HAL_TIM_Base_MspInit+0xec>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017ac:	bf00      	nop
 80017ae:	3728      	adds	r7, #40	; 0x28
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020000 	.word	0x40020000
 80017bc:	20000120 	.word	0x20000120
 80017c0:	40026088 	.word	0x40026088

080017c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a12      	ldr	r2, [pc, #72]	; (800182c <HAL_TIM_MspPostInit+0x68>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d11e      	bne.n	8001824 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <HAL_TIM_MspPostInit+0x6c>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a10      	ldr	r2, [pc, #64]	; (8001830 <HAL_TIM_MspPostInit+0x6c>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <HAL_TIM_MspPostInit+0x6c>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001802:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001806:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	2300      	movs	r3, #0
 8001812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001814:	2301      	movs	r3, #1
 8001816:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	4619      	mov	r1, r3
 800181e:	4805      	ldr	r0, [pc, #20]	; (8001834 <HAL_TIM_MspPostInit+0x70>)
 8001820:	f000 fdb6 	bl	8002390 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001824:	bf00      	nop
 8001826:	3720      	adds	r7, #32
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40010000 	.word	0x40010000
 8001830:	40023800 	.word	0x40023800
 8001834:	40020000 	.word	0x40020000

08001838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a19      	ldr	r2, [pc, #100]	; (80018bc <HAL_UART_MspInit+0x84>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d12b      	bne.n	80018b2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <HAL_UART_MspInit+0x88>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	4a17      	ldr	r2, [pc, #92]	; (80018c0 <HAL_UART_MspInit+0x88>)
 8001864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001868:	6413      	str	r3, [r2, #64]	; 0x40
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <HAL_UART_MspInit+0x88>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <HAL_UART_MspInit+0x88>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a10      	ldr	r2, [pc, #64]	; (80018c0 <HAL_UART_MspInit+0x88>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <HAL_UART_MspInit+0x88>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001892:	230c      	movs	r3, #12
 8001894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189e:	2303      	movs	r3, #3
 80018a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018a2:	2307      	movs	r3, #7
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	4805      	ldr	r0, [pc, #20]	; (80018c4 <HAL_UART_MspInit+0x8c>)
 80018ae:	f000 fd6f 	bl	8002390 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018b2:	bf00      	nop
 80018b4:	3728      	adds	r7, #40	; 0x28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40004400 	.word	0x40004400
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40020000 	.word	0x40020000

080018c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <NMI_Handler+0x4>

080018ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d2:	e7fe      	b.n	80018d2 <HardFault_Handler+0x4>

080018d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <MemManage_Handler+0x4>

080018da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018de:	e7fe      	b.n	80018de <BusFault_Handler+0x4>

080018e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <UsageFault_Handler+0x4>

080018e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001914:	f000 f89a 	bl	8001a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}

0800191c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <DMA1_Stream5_IRQHandler+0x10>)
 8001922:	f000 facb 	bl	8001ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000120 	.word	0x20000120

08001930 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <SystemInit+0x20>)
 8001936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800193a:	4a05      	ldr	r2, [pc, #20]	; (8001950 <SystemInit+0x20>)
 800193c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001940:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001954:	f8df d034 	ldr.w	sp, [pc, #52]	; 800198c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001958:	480d      	ldr	r0, [pc, #52]	; (8001990 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800195a:	490e      	ldr	r1, [pc, #56]	; (8001994 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800195c:	4a0e      	ldr	r2, [pc, #56]	; (8001998 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001960:	e002      	b.n	8001968 <LoopCopyDataInit>

08001962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001966:	3304      	adds	r3, #4

08001968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800196c:	d3f9      	bcc.n	8001962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800196e:	4a0b      	ldr	r2, [pc, #44]	; (800199c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001970:	4c0b      	ldr	r4, [pc, #44]	; (80019a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001974:	e001      	b.n	800197a <LoopFillZerobss>

08001976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001978:	3204      	adds	r2, #4

0800197a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800197c:	d3fb      	bcc.n	8001976 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800197e:	f7ff ffd7 	bl	8001930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001982:	f003 f971 	bl	8004c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001986:	f7ff fa87 	bl	8000e98 <main>
  bx  lr    
 800198a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800198c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001994:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001998:	08005b70 	.word	0x08005b70
  ldr r2, =_sbss
 800199c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80019a0:	20000230 	.word	0x20000230

080019a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019a4:	e7fe      	b.n	80019a4 <ADC_IRQHandler>
	...

080019a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <HAL_Init+0x40>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0d      	ldr	r2, [pc, #52]	; (80019e8 <HAL_Init+0x40>)
 80019b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_Init+0x40>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <HAL_Init+0x40>)
 80019be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <HAL_Init+0x40>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <HAL_Init+0x40>)
 80019ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d0:	2003      	movs	r0, #3
 80019d2:	f000 f92b 	bl	8001c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019d6:	2000      	movs	r0, #0
 80019d8:	f000 f808 	bl	80019ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019dc:	f7ff fe2e 	bl	800163c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40023c00 	.word	0x40023c00

080019ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_InitTick+0x54>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_InitTick+0x58>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 f943 	bl	8001c96 <HAL_SYSTICK_Config>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00e      	b.n	8001a38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b0f      	cmp	r3, #15
 8001a1e:	d80a      	bhi.n	8001a36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a20:	2200      	movs	r2, #0
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f000 f90b 	bl	8001c42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a2c:	4a06      	ldr	r2, [pc, #24]	; (8001a48 <HAL_InitTick+0x5c>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	e000      	b.n	8001a38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000004 	.word	0x20000004
 8001a44:	2000000c 	.word	0x2000000c
 8001a48:	20000008 	.word	0x20000008

08001a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_IncTick+0x20>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_IncTick+0x24>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <HAL_IncTick+0x24>)
 8001a5e:	6013      	str	r3, [r2, #0]
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	2000000c 	.word	0x2000000c
 8001a70:	2000022c 	.word	0x2000022c

08001a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return uwTick;
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <HAL_GetTick+0x14>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	2000022c 	.word	0x2000022c

08001a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001abe:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	60d3      	str	r3, [r2, #12]
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <__NVIC_GetPriorityGrouping+0x18>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	0a1b      	lsrs	r3, r3, #8
 8001ade:	f003 0307 	and.w	r3, r3, #7
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	db0b      	blt.n	8001b1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	f003 021f 	and.w	r2, r3, #31
 8001b08:	4907      	ldr	r1, [pc, #28]	; (8001b28 <__NVIC_EnableIRQ+0x38>)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	095b      	lsrs	r3, r3, #5
 8001b10:	2001      	movs	r0, #1
 8001b12:	fa00 f202 	lsl.w	r2, r0, r2
 8001b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e000e100 	.word	0xe000e100

08001b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	6039      	str	r1, [r7, #0]
 8001b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	db0a      	blt.n	8001b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	490c      	ldr	r1, [pc, #48]	; (8001b78 <__NVIC_SetPriority+0x4c>)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	0112      	lsls	r2, r2, #4
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	440b      	add	r3, r1
 8001b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b54:	e00a      	b.n	8001b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4908      	ldr	r1, [pc, #32]	; (8001b7c <__NVIC_SetPriority+0x50>)
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	3b04      	subs	r3, #4
 8001b64:	0112      	lsls	r2, r2, #4
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	440b      	add	r3, r1
 8001b6a:	761a      	strb	r2, [r3, #24]
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000e100 	.word	0xe000e100
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b089      	sub	sp, #36	; 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f1c3 0307 	rsb	r3, r3, #7
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	bf28      	it	cs
 8001b9e:	2304      	movcs	r3, #4
 8001ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	2b06      	cmp	r3, #6
 8001ba8:	d902      	bls.n	8001bb0 <NVIC_EncodePriority+0x30>
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3b03      	subs	r3, #3
 8001bae:	e000      	b.n	8001bb2 <NVIC_EncodePriority+0x32>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43da      	mvns	r2, r3
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd2:	43d9      	mvns	r1, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd8:	4313      	orrs	r3, r2
         );
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3724      	adds	r7, #36	; 0x24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf8:	d301      	bcc.n	8001bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e00f      	b.n	8001c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <SysTick_Config+0x40>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c06:	210f      	movs	r1, #15
 8001c08:	f04f 30ff 	mov.w	r0, #4294967295
 8001c0c:	f7ff ff8e 	bl	8001b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <SysTick_Config+0x40>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c16:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <SysTick_Config+0x40>)
 8001c18:	2207      	movs	r2, #7
 8001c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	e000e010 	.word	0xe000e010

08001c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff ff29 	bl	8001a8c <__NVIC_SetPriorityGrouping>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b086      	sub	sp, #24
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	4603      	mov	r3, r0
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
 8001c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c54:	f7ff ff3e 	bl	8001ad4 <__NVIC_GetPriorityGrouping>
 8001c58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	6978      	ldr	r0, [r7, #20]
 8001c60:	f7ff ff8e 	bl	8001b80 <NVIC_EncodePriority>
 8001c64:	4602      	mov	r2, r0
 8001c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff5d 	bl	8001b2c <__NVIC_SetPriority>
}
 8001c72:	bf00      	nop
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4603      	mov	r3, r0
 8001c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff31 	bl	8001af0 <__NVIC_EnableIRQ>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ffa2 	bl	8001be8 <SysTick_Config>
 8001ca4:	4603      	mov	r3, r0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cbc:	f7ff feda 	bl	8001a74 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e099      	b.n	8001e00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0201 	bic.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cec:	e00f      	b.n	8001d0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cee:	f7ff fec1 	bl	8001a74 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b05      	cmp	r3, #5
 8001cfa:	d908      	bls.n	8001d0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2220      	movs	r2, #32
 8001d00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2203      	movs	r2, #3
 8001d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e078      	b.n	8001e00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1e8      	bne.n	8001cee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	4b38      	ldr	r3, [pc, #224]	; (8001e08 <HAL_DMA_Init+0x158>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d107      	bne.n	8001d78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d70:	4313      	orrs	r3, r2
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f023 0307 	bic.w	r3, r3, #7
 8001d8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d117      	bne.n	8001dd2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00e      	beq.n	8001dd2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 fa6f 	bl	8002298 <DMA_CheckFifoParam>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d008      	beq.n	8001dd2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2240      	movs	r2, #64	; 0x40
 8001dc4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e016      	b.n	8001e00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 fa26 	bl	800222c <DMA_CalcBaseAndBitshift>
 8001de0:	4603      	mov	r3, r0
 8001de2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de8:	223f      	movs	r2, #63	; 0x3f
 8001dea:	409a      	lsls	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	f010803f 	.word	0xf010803f

08001e0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
 8001e18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e22:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <HAL_DMA_Start_IT+0x26>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e040      	b.n	8001eb4 <HAL_DMA_Start_IT+0xa8>
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d12f      	bne.n	8001ea6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2202      	movs	r2, #2
 8001e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2200      	movs	r2, #0
 8001e52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	68b9      	ldr	r1, [r7, #8]
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f000 f9b8 	bl	80021d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e64:	223f      	movs	r2, #63	; 0x3f
 8001e66:	409a      	lsls	r2, r3
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0216 	orr.w	r2, r2, #22
 8001e7a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d007      	beq.n	8001e94 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0208 	orr.w	r2, r2, #8
 8001e92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	e005      	b.n	8001eb2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ec8:	4b8e      	ldr	r3, [pc, #568]	; (8002104 <HAL_DMA_IRQHandler+0x248>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a8e      	ldr	r2, [pc, #568]	; (8002108 <HAL_DMA_IRQHandler+0x24c>)
 8001ece:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed2:	0a9b      	lsrs	r3, r3, #10
 8001ed4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee6:	2208      	movs	r2, #8
 8001ee8:	409a      	lsls	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d01a      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d013      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0204 	bic.w	r2, r2, #4
 8001f0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f14:	2208      	movs	r2, #8
 8001f16:	409a      	lsls	r2, r3
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f20:	f043 0201 	orr.w	r2, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	409a      	lsls	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d012      	beq.n	8001f5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00b      	beq.n	8001f5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	409a      	lsls	r2, r3
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f56:	f043 0202 	orr.w	r2, r3, #2
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f62:	2204      	movs	r2, #4
 8001f64:	409a      	lsls	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d012      	beq.n	8001f94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00b      	beq.n	8001f94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f80:	2204      	movs	r2, #4
 8001f82:	409a      	lsls	r2, r3
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8c:	f043 0204 	orr.w	r2, r3, #4
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f98:	2210      	movs	r2, #16
 8001f9a:	409a      	lsls	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d043      	beq.n	800202c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d03c      	beq.n	800202c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb6:	2210      	movs	r2, #16
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d018      	beq.n	8001ffe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d108      	bne.n	8001fec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d024      	beq.n	800202c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	4798      	blx	r3
 8001fea:	e01f      	b.n	800202c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d01b      	beq.n	800202c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	4798      	blx	r3
 8001ffc:	e016      	b.n	800202c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002008:	2b00      	cmp	r3, #0
 800200a:	d107      	bne.n	800201c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0208 	bic.w	r2, r2, #8
 800201a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002030:	2220      	movs	r2, #32
 8002032:	409a      	lsls	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4013      	ands	r3, r2
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 808f 	beq.w	800215c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 8087 	beq.w	800215c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002052:	2220      	movs	r2, #32
 8002054:	409a      	lsls	r2, r3
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b05      	cmp	r3, #5
 8002064:	d136      	bne.n	80020d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0216 	bic.w	r2, r2, #22
 8002074:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	695a      	ldr	r2, [r3, #20]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002084:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	2b00      	cmp	r3, #0
 800208c:	d103      	bne.n	8002096 <HAL_DMA_IRQHandler+0x1da>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002092:	2b00      	cmp	r3, #0
 8002094:	d007      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0208 	bic.w	r2, r2, #8
 80020a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020aa:	223f      	movs	r2, #63	; 0x3f
 80020ac:	409a      	lsls	r2, r3
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d07e      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	4798      	blx	r3
        }
        return;
 80020d2:	e079      	b.n	80021c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d01d      	beq.n	800211e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10d      	bne.n	800210c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d031      	beq.n	800215c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	4798      	blx	r3
 8002100:	e02c      	b.n	800215c <HAL_DMA_IRQHandler+0x2a0>
 8002102:	bf00      	nop
 8002104:	20000004 	.word	0x20000004
 8002108:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002110:	2b00      	cmp	r3, #0
 8002112:	d023      	beq.n	800215c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4798      	blx	r3
 800211c:	e01e      	b.n	800215c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10f      	bne.n	800214c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0210 	bic.w	r2, r2, #16
 800213a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002160:	2b00      	cmp	r3, #0
 8002162:	d032      	beq.n	80021ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	d022      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2205      	movs	r2, #5
 8002174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0201 	bic.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	3301      	adds	r3, #1
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	429a      	cmp	r2, r3
 8002192:	d307      	bcc.n	80021a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f2      	bne.n	8002188 <HAL_DMA_IRQHandler+0x2cc>
 80021a2:	e000      	b.n	80021a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d005      	beq.n	80021ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	4798      	blx	r3
 80021c6:	e000      	b.n	80021ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80021c8:	bf00      	nop
    }
  }
}
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
 80021dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	2b40      	cmp	r3, #64	; 0x40
 80021fc:	d108      	bne.n	8002210 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800220e:	e007      	b.n	8002220 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	60da      	str	r2, [r3, #12]
}
 8002220:	bf00      	nop
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	3b10      	subs	r3, #16
 800223c:	4a14      	ldr	r2, [pc, #80]	; (8002290 <DMA_CalcBaseAndBitshift+0x64>)
 800223e:	fba2 2303 	umull	r2, r3, r2, r3
 8002242:	091b      	lsrs	r3, r3, #4
 8002244:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002246:	4a13      	ldr	r2, [pc, #76]	; (8002294 <DMA_CalcBaseAndBitshift+0x68>)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4413      	add	r3, r2
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2b03      	cmp	r3, #3
 8002258:	d909      	bls.n	800226e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002262:	f023 0303 	bic.w	r3, r3, #3
 8002266:	1d1a      	adds	r2, r3, #4
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	659a      	str	r2, [r3, #88]	; 0x58
 800226c:	e007      	b.n	800227e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002276:	f023 0303 	bic.w	r3, r3, #3
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002282:	4618      	mov	r0, r3
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	aaaaaaab 	.word	0xaaaaaaab
 8002294:	08005b28 	.word	0x08005b28

08002298 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d11f      	bne.n	80022f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d856      	bhi.n	8002366 <DMA_CheckFifoParam+0xce>
 80022b8:	a201      	add	r2, pc, #4	; (adr r2, 80022c0 <DMA_CheckFifoParam+0x28>)
 80022ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022be:	bf00      	nop
 80022c0:	080022d1 	.word	0x080022d1
 80022c4:	080022e3 	.word	0x080022e3
 80022c8:	080022d1 	.word	0x080022d1
 80022cc:	08002367 	.word	0x08002367
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d046      	beq.n	800236a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022e0:	e043      	b.n	800236a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022ea:	d140      	bne.n	800236e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022f0:	e03d      	b.n	800236e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022fa:	d121      	bne.n	8002340 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d837      	bhi.n	8002372 <DMA_CheckFifoParam+0xda>
 8002302:	a201      	add	r2, pc, #4	; (adr r2, 8002308 <DMA_CheckFifoParam+0x70>)
 8002304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002308:	08002319 	.word	0x08002319
 800230c:	0800231f 	.word	0x0800231f
 8002310:	08002319 	.word	0x08002319
 8002314:	08002331 	.word	0x08002331
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	73fb      	strb	r3, [r7, #15]
      break;
 800231c:	e030      	b.n	8002380 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002322:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d025      	beq.n	8002376 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800232e:	e022      	b.n	8002376 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002334:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002338:	d11f      	bne.n	800237a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800233e:	e01c      	b.n	800237a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d903      	bls.n	800234e <DMA_CheckFifoParam+0xb6>
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d003      	beq.n	8002354 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800234c:	e018      	b.n	8002380 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	73fb      	strb	r3, [r7, #15]
      break;
 8002352:	e015      	b.n	8002380 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002358:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00e      	beq.n	800237e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	73fb      	strb	r3, [r7, #15]
      break;
 8002364:	e00b      	b.n	800237e <DMA_CheckFifoParam+0xe6>
      break;
 8002366:	bf00      	nop
 8002368:	e00a      	b.n	8002380 <DMA_CheckFifoParam+0xe8>
      break;
 800236a:	bf00      	nop
 800236c:	e008      	b.n	8002380 <DMA_CheckFifoParam+0xe8>
      break;
 800236e:	bf00      	nop
 8002370:	e006      	b.n	8002380 <DMA_CheckFifoParam+0xe8>
      break;
 8002372:	bf00      	nop
 8002374:	e004      	b.n	8002380 <DMA_CheckFifoParam+0xe8>
      break;
 8002376:	bf00      	nop
 8002378:	e002      	b.n	8002380 <DMA_CheckFifoParam+0xe8>
      break;   
 800237a:	bf00      	nop
 800237c:	e000      	b.n	8002380 <DMA_CheckFifoParam+0xe8>
      break;
 800237e:	bf00      	nop
    }
  } 
  
  return status; 
 8002380:	7bfb      	ldrb	r3, [r7, #15]
}
 8002382:	4618      	mov	r0, r3
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop

08002390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002390:	b480      	push	{r7}
 8002392:	b089      	sub	sp, #36	; 0x24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800239e:	2300      	movs	r3, #0
 80023a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
 80023aa:	e159      	b.n	8002660 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023ac:	2201      	movs	r2, #1
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	f040 8148 	bne.w	800265a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d005      	beq.n	80023e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d130      	bne.n	8002444 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	2203      	movs	r2, #3
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4013      	ands	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002418:	2201      	movs	r2, #1
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	091b      	lsrs	r3, r3, #4
 800242e:	f003 0201 	and.w	r2, r3, #1
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	2b03      	cmp	r3, #3
 800244e:	d017      	beq.n	8002480 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	2203      	movs	r2, #3
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4313      	orrs	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d123      	bne.n	80024d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	08da      	lsrs	r2, r3, #3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3208      	adds	r2, #8
 8002494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002498:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	220f      	movs	r2, #15
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	08da      	lsrs	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3208      	adds	r2, #8
 80024ce:	69b9      	ldr	r1, [r7, #24]
 80024d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	2203      	movs	r2, #3
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 0203 	and.w	r2, r3, #3
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 80a2 	beq.w	800265a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	4b57      	ldr	r3, [pc, #348]	; (8002678 <HAL_GPIO_Init+0x2e8>)
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	4a56      	ldr	r2, [pc, #344]	; (8002678 <HAL_GPIO_Init+0x2e8>)
 8002520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002524:	6453      	str	r3, [r2, #68]	; 0x44
 8002526:	4b54      	ldr	r3, [pc, #336]	; (8002678 <HAL_GPIO_Init+0x2e8>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002532:	4a52      	ldr	r2, [pc, #328]	; (800267c <HAL_GPIO_Init+0x2ec>)
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	089b      	lsrs	r3, r3, #2
 8002538:	3302      	adds	r3, #2
 800253a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	220f      	movs	r2, #15
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a49      	ldr	r2, [pc, #292]	; (8002680 <HAL_GPIO_Init+0x2f0>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d019      	beq.n	8002592 <HAL_GPIO_Init+0x202>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a48      	ldr	r2, [pc, #288]	; (8002684 <HAL_GPIO_Init+0x2f4>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d013      	beq.n	800258e <HAL_GPIO_Init+0x1fe>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a47      	ldr	r2, [pc, #284]	; (8002688 <HAL_GPIO_Init+0x2f8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00d      	beq.n	800258a <HAL_GPIO_Init+0x1fa>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a46      	ldr	r2, [pc, #280]	; (800268c <HAL_GPIO_Init+0x2fc>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d007      	beq.n	8002586 <HAL_GPIO_Init+0x1f6>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a45      	ldr	r2, [pc, #276]	; (8002690 <HAL_GPIO_Init+0x300>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d101      	bne.n	8002582 <HAL_GPIO_Init+0x1f2>
 800257e:	2304      	movs	r3, #4
 8002580:	e008      	b.n	8002594 <HAL_GPIO_Init+0x204>
 8002582:	2307      	movs	r3, #7
 8002584:	e006      	b.n	8002594 <HAL_GPIO_Init+0x204>
 8002586:	2303      	movs	r3, #3
 8002588:	e004      	b.n	8002594 <HAL_GPIO_Init+0x204>
 800258a:	2302      	movs	r3, #2
 800258c:	e002      	b.n	8002594 <HAL_GPIO_Init+0x204>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <HAL_GPIO_Init+0x204>
 8002592:	2300      	movs	r3, #0
 8002594:	69fa      	ldr	r2, [r7, #28]
 8002596:	f002 0203 	and.w	r2, r2, #3
 800259a:	0092      	lsls	r2, r2, #2
 800259c:	4093      	lsls	r3, r2
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025a4:	4935      	ldr	r1, [pc, #212]	; (800267c <HAL_GPIO_Init+0x2ec>)
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	089b      	lsrs	r3, r3, #2
 80025aa:	3302      	adds	r3, #2
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025b2:	4b38      	ldr	r3, [pc, #224]	; (8002694 <HAL_GPIO_Init+0x304>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	43db      	mvns	r3, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4013      	ands	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025d6:	4a2f      	ldr	r2, [pc, #188]	; (8002694 <HAL_GPIO_Init+0x304>)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025dc:	4b2d      	ldr	r3, [pc, #180]	; (8002694 <HAL_GPIO_Init+0x304>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002600:	4a24      	ldr	r2, [pc, #144]	; (8002694 <HAL_GPIO_Init+0x304>)
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002606:	4b23      	ldr	r3, [pc, #140]	; (8002694 <HAL_GPIO_Init+0x304>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	43db      	mvns	r3, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4013      	ands	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800262a:	4a1a      	ldr	r2, [pc, #104]	; (8002694 <HAL_GPIO_Init+0x304>)
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002630:	4b18      	ldr	r3, [pc, #96]	; (8002694 <HAL_GPIO_Init+0x304>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002654:	4a0f      	ldr	r2, [pc, #60]	; (8002694 <HAL_GPIO_Init+0x304>)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3301      	adds	r3, #1
 800265e:	61fb      	str	r3, [r7, #28]
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	2b0f      	cmp	r3, #15
 8002664:	f67f aea2 	bls.w	80023ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002668:	bf00      	nop
 800266a:	bf00      	nop
 800266c:	3724      	adds	r7, #36	; 0x24
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40023800 	.word	0x40023800
 800267c:	40013800 	.word	0x40013800
 8002680:	40020000 	.word	0x40020000
 8002684:	40020400 	.word	0x40020400
 8002688:	40020800 	.word	0x40020800
 800268c:	40020c00 	.word	0x40020c00
 8002690:	40021000 	.word	0x40021000
 8002694:	40013c00 	.word	0x40013c00

08002698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	807b      	strh	r3, [r7, #2]
 80026a4:	4613      	mov	r3, r2
 80026a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026a8:	787b      	ldrb	r3, [r7, #1]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ae:	887a      	ldrh	r2, [r7, #2]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026b4:	e003      	b.n	80026be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026b6:	887b      	ldrh	r3, [r7, #2]
 80026b8:	041a      	lsls	r2, r3, #16
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	619a      	str	r2, [r3, #24]
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
	...

080026cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e267      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d075      	beq.n	80027d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026ea:	4b88      	ldr	r3, [pc, #544]	; (800290c <HAL_RCC_OscConfig+0x240>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 030c 	and.w	r3, r3, #12
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d00c      	beq.n	8002710 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026f6:	4b85      	ldr	r3, [pc, #532]	; (800290c <HAL_RCC_OscConfig+0x240>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026fe:	2b08      	cmp	r3, #8
 8002700:	d112      	bne.n	8002728 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002702:	4b82      	ldr	r3, [pc, #520]	; (800290c <HAL_RCC_OscConfig+0x240>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800270a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800270e:	d10b      	bne.n	8002728 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002710:	4b7e      	ldr	r3, [pc, #504]	; (800290c <HAL_RCC_OscConfig+0x240>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d05b      	beq.n	80027d4 <HAL_RCC_OscConfig+0x108>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d157      	bne.n	80027d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e242      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002730:	d106      	bne.n	8002740 <HAL_RCC_OscConfig+0x74>
 8002732:	4b76      	ldr	r3, [pc, #472]	; (800290c <HAL_RCC_OscConfig+0x240>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a75      	ldr	r2, [pc, #468]	; (800290c <HAL_RCC_OscConfig+0x240>)
 8002738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	e01d      	b.n	800277c <HAL_RCC_OscConfig+0xb0>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002748:	d10c      	bne.n	8002764 <HAL_RCC_OscConfig+0x98>
 800274a:	4b70      	ldr	r3, [pc, #448]	; (800290c <HAL_RCC_OscConfig+0x240>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a6f      	ldr	r2, [pc, #444]	; (800290c <HAL_RCC_OscConfig+0x240>)
 8002750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	4b6d      	ldr	r3, [pc, #436]	; (800290c <HAL_RCC_OscConfig+0x240>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a6c      	ldr	r2, [pc, #432]	; (800290c <HAL_RCC_OscConfig+0x240>)
 800275c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	e00b      	b.n	800277c <HAL_RCC_OscConfig+0xb0>
 8002764:	4b69      	ldr	r3, [pc, #420]	; (800290c <HAL_RCC_OscConfig+0x240>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a68      	ldr	r2, [pc, #416]	; (800290c <HAL_RCC_OscConfig+0x240>)
 800276a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800276e:	6013      	str	r3, [r2, #0]
 8002770:	4b66      	ldr	r3, [pc, #408]	; (800290c <HAL_RCC_OscConfig+0x240>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a65      	ldr	r2, [pc, #404]	; (800290c <HAL_RCC_OscConfig+0x240>)
 8002776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800277a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d013      	beq.n	80027ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002784:	f7ff f976 	bl	8001a74 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800278c:	f7ff f972 	bl	8001a74 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b64      	cmp	r3, #100	; 0x64
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e207      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279e:	4b5b      	ldr	r3, [pc, #364]	; (800290c <HAL_RCC_OscConfig+0x240>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0xc0>
 80027aa:	e014      	b.n	80027d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ac:	f7ff f962 	bl	8001a74 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b4:	f7ff f95e 	bl	8001a74 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b64      	cmp	r3, #100	; 0x64
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e1f3      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c6:	4b51      	ldr	r3, [pc, #324]	; (800290c <HAL_RCC_OscConfig+0x240>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f0      	bne.n	80027b4 <HAL_RCC_OscConfig+0xe8>
 80027d2:	e000      	b.n	80027d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d063      	beq.n	80028aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027e2:	4b4a      	ldr	r3, [pc, #296]	; (800290c <HAL_RCC_OscConfig+0x240>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 030c 	and.w	r3, r3, #12
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00b      	beq.n	8002806 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ee:	4b47      	ldr	r3, [pc, #284]	; (800290c <HAL_RCC_OscConfig+0x240>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d11c      	bne.n	8002834 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027fa:	4b44      	ldr	r3, [pc, #272]	; (800290c <HAL_RCC_OscConfig+0x240>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d116      	bne.n	8002834 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002806:	4b41      	ldr	r3, [pc, #260]	; (800290c <HAL_RCC_OscConfig+0x240>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d005      	beq.n	800281e <HAL_RCC_OscConfig+0x152>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d001      	beq.n	800281e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e1c7      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281e:	4b3b      	ldr	r3, [pc, #236]	; (800290c <HAL_RCC_OscConfig+0x240>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4937      	ldr	r1, [pc, #220]	; (800290c <HAL_RCC_OscConfig+0x240>)
 800282e:	4313      	orrs	r3, r2
 8002830:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002832:	e03a      	b.n	80028aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d020      	beq.n	800287e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800283c:	4b34      	ldr	r3, [pc, #208]	; (8002910 <HAL_RCC_OscConfig+0x244>)
 800283e:	2201      	movs	r2, #1
 8002840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002842:	f7ff f917 	bl	8001a74 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800284a:	f7ff f913 	bl	8001a74 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e1a8      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285c:	4b2b      	ldr	r3, [pc, #172]	; (800290c <HAL_RCC_OscConfig+0x240>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0f0      	beq.n	800284a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002868:	4b28      	ldr	r3, [pc, #160]	; (800290c <HAL_RCC_OscConfig+0x240>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	4925      	ldr	r1, [pc, #148]	; (800290c <HAL_RCC_OscConfig+0x240>)
 8002878:	4313      	orrs	r3, r2
 800287a:	600b      	str	r3, [r1, #0]
 800287c:	e015      	b.n	80028aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800287e:	4b24      	ldr	r3, [pc, #144]	; (8002910 <HAL_RCC_OscConfig+0x244>)
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7ff f8f6 	bl	8001a74 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800288c:	f7ff f8f2 	bl	8001a74 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e187      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289e:	4b1b      	ldr	r3, [pc, #108]	; (800290c <HAL_RCC_OscConfig+0x240>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d036      	beq.n	8002924 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d016      	beq.n	80028ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028be:	4b15      	ldr	r3, [pc, #84]	; (8002914 <HAL_RCC_OscConfig+0x248>)
 80028c0:	2201      	movs	r2, #1
 80028c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c4:	f7ff f8d6 	bl	8001a74 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028cc:	f7ff f8d2 	bl	8001a74 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e167      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028de:	4b0b      	ldr	r3, [pc, #44]	; (800290c <HAL_RCC_OscConfig+0x240>)
 80028e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f0      	beq.n	80028cc <HAL_RCC_OscConfig+0x200>
 80028ea:	e01b      	b.n	8002924 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ec:	4b09      	ldr	r3, [pc, #36]	; (8002914 <HAL_RCC_OscConfig+0x248>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f2:	f7ff f8bf 	bl	8001a74 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f8:	e00e      	b.n	8002918 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028fa:	f7ff f8bb 	bl	8001a74 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d907      	bls.n	8002918 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e150      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
 800290c:	40023800 	.word	0x40023800
 8002910:	42470000 	.word	0x42470000
 8002914:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002918:	4b88      	ldr	r3, [pc, #544]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 800291a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1ea      	bne.n	80028fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 8097 	beq.w	8002a60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002932:	2300      	movs	r3, #0
 8002934:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002936:	4b81      	ldr	r3, [pc, #516]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10f      	bne.n	8002962 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	4b7d      	ldr	r3, [pc, #500]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	4a7c      	ldr	r2, [pc, #496]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 800294c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002950:	6413      	str	r3, [r2, #64]	; 0x40
 8002952:	4b7a      	ldr	r3, [pc, #488]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800295e:	2301      	movs	r3, #1
 8002960:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002962:	4b77      	ldr	r3, [pc, #476]	; (8002b40 <HAL_RCC_OscConfig+0x474>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296a:	2b00      	cmp	r3, #0
 800296c:	d118      	bne.n	80029a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800296e:	4b74      	ldr	r3, [pc, #464]	; (8002b40 <HAL_RCC_OscConfig+0x474>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a73      	ldr	r2, [pc, #460]	; (8002b40 <HAL_RCC_OscConfig+0x474>)
 8002974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002978:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800297a:	f7ff f87b 	bl	8001a74 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002982:	f7ff f877 	bl	8001a74 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e10c      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002994:	4b6a      	ldr	r3, [pc, #424]	; (8002b40 <HAL_RCC_OscConfig+0x474>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d106      	bne.n	80029b6 <HAL_RCC_OscConfig+0x2ea>
 80029a8:	4b64      	ldr	r3, [pc, #400]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 80029aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ac:	4a63      	ldr	r2, [pc, #396]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	6713      	str	r3, [r2, #112]	; 0x70
 80029b4:	e01c      	b.n	80029f0 <HAL_RCC_OscConfig+0x324>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b05      	cmp	r3, #5
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCC_OscConfig+0x30c>
 80029be:	4b5f      	ldr	r3, [pc, #380]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	4a5e      	ldr	r2, [pc, #376]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 80029c4:	f043 0304 	orr.w	r3, r3, #4
 80029c8:	6713      	str	r3, [r2, #112]	; 0x70
 80029ca:	4b5c      	ldr	r3, [pc, #368]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 80029cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ce:	4a5b      	ldr	r2, [pc, #364]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	6713      	str	r3, [r2, #112]	; 0x70
 80029d6:	e00b      	b.n	80029f0 <HAL_RCC_OscConfig+0x324>
 80029d8:	4b58      	ldr	r3, [pc, #352]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 80029da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029dc:	4a57      	ldr	r2, [pc, #348]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 80029de:	f023 0301 	bic.w	r3, r3, #1
 80029e2:	6713      	str	r3, [r2, #112]	; 0x70
 80029e4:	4b55      	ldr	r3, [pc, #340]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 80029e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e8:	4a54      	ldr	r2, [pc, #336]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 80029ea:	f023 0304 	bic.w	r3, r3, #4
 80029ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d015      	beq.n	8002a24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f8:	f7ff f83c 	bl	8001a74 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029fe:	e00a      	b.n	8002a16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a00:	f7ff f838 	bl	8001a74 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e0cb      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a16:	4b49      	ldr	r3, [pc, #292]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 8002a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0ee      	beq.n	8002a00 <HAL_RCC_OscConfig+0x334>
 8002a22:	e014      	b.n	8002a4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a24:	f7ff f826 	bl	8001a74 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a2a:	e00a      	b.n	8002a42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a2c:	f7ff f822 	bl	8001a74 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e0b5      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a42:	4b3e      	ldr	r3, [pc, #248]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 8002a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1ee      	bne.n	8002a2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a4e:	7dfb      	ldrb	r3, [r7, #23]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d105      	bne.n	8002a60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a54:	4b39      	ldr	r3, [pc, #228]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	4a38      	ldr	r2, [pc, #224]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 8002a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 80a1 	beq.w	8002bac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a6a:	4b34      	ldr	r3, [pc, #208]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	2b08      	cmp	r3, #8
 8002a74:	d05c      	beq.n	8002b30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d141      	bne.n	8002b02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7e:	4b31      	ldr	r3, [pc, #196]	; (8002b44 <HAL_RCC_OscConfig+0x478>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7fe fff6 	bl	8001a74 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fe fff2 	bl	8001a74 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e087      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9e:	4b27      	ldr	r3, [pc, #156]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69da      	ldr	r2, [r3, #28]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	019b      	lsls	r3, r3, #6
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	085b      	lsrs	r3, r3, #1
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	041b      	lsls	r3, r3, #16
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	061b      	lsls	r3, r3, #24
 8002ace:	491b      	ldr	r1, [pc, #108]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad4:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <HAL_RCC_OscConfig+0x478>)
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ada:	f7fe ffcb 	bl	8001a74 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ae2:	f7fe ffc7 	bl	8001a74 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e05c      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af4:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0f0      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x416>
 8002b00:	e054      	b.n	8002bac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b02:	4b10      	ldr	r3, [pc, #64]	; (8002b44 <HAL_RCC_OscConfig+0x478>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fe ffb4 	bl	8001a74 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b10:	f7fe ffb0 	bl	8001a74 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e045      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b22:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x444>
 8002b2e:	e03d      	b.n	8002bac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d107      	bne.n	8002b48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e038      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40007000 	.word	0x40007000
 8002b44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b48:	4b1b      	ldr	r3, [pc, #108]	; (8002bb8 <HAL_RCC_OscConfig+0x4ec>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d028      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d121      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d11a      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b78:	4013      	ands	r3, r2
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d111      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8e:	085b      	lsrs	r3, r3, #1
 8002b90:	3b01      	subs	r3, #1
 8002b92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d107      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d001      	beq.n	8002bac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40023800 	.word	0x40023800

08002bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e0cc      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd0:	4b68      	ldr	r3, [pc, #416]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d90c      	bls.n	8002bf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bde:	4b65      	ldr	r3, [pc, #404]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be6:	4b63      	ldr	r3, [pc, #396]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0b8      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d020      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c10:	4b59      	ldr	r3, [pc, #356]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4a58      	ldr	r2, [pc, #352]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c28:	4b53      	ldr	r3, [pc, #332]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	4a52      	ldr	r2, [pc, #328]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c34:	4b50      	ldr	r3, [pc, #320]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	494d      	ldr	r1, [pc, #308]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d044      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d107      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5a:	4b47      	ldr	r3, [pc, #284]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d119      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e07f      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d003      	beq.n	8002c7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d107      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7a:	4b3f      	ldr	r3, [pc, #252]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d109      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e06f      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8a:	4b3b      	ldr	r3, [pc, #236]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e067      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c9a:	4b37      	ldr	r3, [pc, #220]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f023 0203 	bic.w	r2, r3, #3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	4934      	ldr	r1, [pc, #208]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cac:	f7fe fee2 	bl	8001a74 <HAL_GetTick>
 8002cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb2:	e00a      	b.n	8002cca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb4:	f7fe fede 	bl	8001a74 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e04f      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cca:	4b2b      	ldr	r3, [pc, #172]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 020c 	and.w	r2, r3, #12
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d1eb      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cdc:	4b25      	ldr	r3, [pc, #148]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d20c      	bcs.n	8002d04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cea:	4b22      	ldr	r3, [pc, #136]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf2:	4b20      	ldr	r3, [pc, #128]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e032      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d10:	4b19      	ldr	r3, [pc, #100]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4916      	ldr	r1, [pc, #88]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d009      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d2e:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	490e      	ldr	r1, [pc, #56]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d42:	f000 f821 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8002d46:	4602      	mov	r2, r0
 8002d48:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	091b      	lsrs	r3, r3, #4
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	490a      	ldr	r1, [pc, #40]	; (8002d7c <HAL_RCC_ClockConfig+0x1c0>)
 8002d54:	5ccb      	ldrb	r3, [r1, r3]
 8002d56:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5a:	4a09      	ldr	r2, [pc, #36]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <HAL_RCC_ClockConfig+0x1c8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fe fe42 	bl	80019ec <HAL_InitTick>

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40023c00 	.word	0x40023c00
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	08005b10 	.word	0x08005b10
 8002d80:	20000004 	.word	0x20000004
 8002d84:	20000008 	.word	0x20000008

08002d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d8c:	b094      	sub	sp, #80	; 0x50
 8002d8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	647b      	str	r3, [r7, #68]	; 0x44
 8002d94:	2300      	movs	r3, #0
 8002d96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d98:	2300      	movs	r3, #0
 8002d9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002da0:	4b79      	ldr	r3, [pc, #484]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 030c 	and.w	r3, r3, #12
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d00d      	beq.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x40>
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	f200 80e1 	bhi.w	8002f74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <HAL_RCC_GetSysClockFreq+0x34>
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d003      	beq.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dba:	e0db      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dbc:	4b73      	ldr	r3, [pc, #460]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x204>)
 8002dbe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002dc0:	e0db      	b.n	8002f7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dc2:	4b73      	ldr	r3, [pc, #460]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x208>)
 8002dc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dc6:	e0d8      	b.n	8002f7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dc8:	4b6f      	ldr	r3, [pc, #444]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dd0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dd2:	4b6d      	ldr	r3, [pc, #436]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d063      	beq.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dde:	4b6a      	ldr	r3, [pc, #424]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	099b      	lsrs	r3, r3, #6
 8002de4:	2200      	movs	r2, #0
 8002de6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002de8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002df0:	633b      	str	r3, [r7, #48]	; 0x30
 8002df2:	2300      	movs	r3, #0
 8002df4:	637b      	str	r3, [r7, #52]	; 0x34
 8002df6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002dfa:	4622      	mov	r2, r4
 8002dfc:	462b      	mov	r3, r5
 8002dfe:	f04f 0000 	mov.w	r0, #0
 8002e02:	f04f 0100 	mov.w	r1, #0
 8002e06:	0159      	lsls	r1, r3, #5
 8002e08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e0c:	0150      	lsls	r0, r2, #5
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4621      	mov	r1, r4
 8002e14:	1a51      	subs	r1, r2, r1
 8002e16:	6139      	str	r1, [r7, #16]
 8002e18:	4629      	mov	r1, r5
 8002e1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e2c:	4659      	mov	r1, fp
 8002e2e:	018b      	lsls	r3, r1, #6
 8002e30:	4651      	mov	r1, sl
 8002e32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e36:	4651      	mov	r1, sl
 8002e38:	018a      	lsls	r2, r1, #6
 8002e3a:	4651      	mov	r1, sl
 8002e3c:	ebb2 0801 	subs.w	r8, r2, r1
 8002e40:	4659      	mov	r1, fp
 8002e42:	eb63 0901 	sbc.w	r9, r3, r1
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e5a:	4690      	mov	r8, r2
 8002e5c:	4699      	mov	r9, r3
 8002e5e:	4623      	mov	r3, r4
 8002e60:	eb18 0303 	adds.w	r3, r8, r3
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	462b      	mov	r3, r5
 8002e68:	eb49 0303 	adc.w	r3, r9, r3
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e7a:	4629      	mov	r1, r5
 8002e7c:	024b      	lsls	r3, r1, #9
 8002e7e:	4621      	mov	r1, r4
 8002e80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e84:	4621      	mov	r1, r4
 8002e86:	024a      	lsls	r2, r1, #9
 8002e88:	4610      	mov	r0, r2
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e8e:	2200      	movs	r2, #0
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e98:	f7fd fe7a 	bl	8000b90 <__aeabi_uldivmod>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ea4:	e058      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea6:	4b38      	ldr	r3, [pc, #224]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	099b      	lsrs	r3, r3, #6
 8002eac:	2200      	movs	r2, #0
 8002eae:	4618      	mov	r0, r3
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002eb6:	623b      	str	r3, [r7, #32]
 8002eb8:	2300      	movs	r3, #0
 8002eba:	627b      	str	r3, [r7, #36]	; 0x24
 8002ebc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ec0:	4642      	mov	r2, r8
 8002ec2:	464b      	mov	r3, r9
 8002ec4:	f04f 0000 	mov.w	r0, #0
 8002ec8:	f04f 0100 	mov.w	r1, #0
 8002ecc:	0159      	lsls	r1, r3, #5
 8002ece:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ed2:	0150      	lsls	r0, r2, #5
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4641      	mov	r1, r8
 8002eda:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ede:	4649      	mov	r1, r9
 8002ee0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ef0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ef4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ef8:	ebb2 040a 	subs.w	r4, r2, sl
 8002efc:	eb63 050b 	sbc.w	r5, r3, fp
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	00eb      	lsls	r3, r5, #3
 8002f0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f0e:	00e2      	lsls	r2, r4, #3
 8002f10:	4614      	mov	r4, r2
 8002f12:	461d      	mov	r5, r3
 8002f14:	4643      	mov	r3, r8
 8002f16:	18e3      	adds	r3, r4, r3
 8002f18:	603b      	str	r3, [r7, #0]
 8002f1a:	464b      	mov	r3, r9
 8002f1c:	eb45 0303 	adc.w	r3, r5, r3
 8002f20:	607b      	str	r3, [r7, #4]
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f2e:	4629      	mov	r1, r5
 8002f30:	028b      	lsls	r3, r1, #10
 8002f32:	4621      	mov	r1, r4
 8002f34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f38:	4621      	mov	r1, r4
 8002f3a:	028a      	lsls	r2, r1, #10
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	4619      	mov	r1, r3
 8002f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f42:	2200      	movs	r2, #0
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	61fa      	str	r2, [r7, #28]
 8002f48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f4c:	f7fd fe20 	bl	8000b90 <__aeabi_uldivmod>
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4613      	mov	r3, r2
 8002f56:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f58:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	0c1b      	lsrs	r3, r3, #16
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	3301      	adds	r3, #1
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002f68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f72:	e002      	b.n	8002f7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x204>)
 8002f76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3750      	adds	r7, #80	; 0x50
 8002f80:	46bd      	mov	sp, r7
 8002f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f86:	bf00      	nop
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	00f42400 	.word	0x00f42400
 8002f90:	007a1200 	.word	0x007a1200

08002f94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f98:	4b03      	ldr	r3, [pc, #12]	; (8002fa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	20000004 	.word	0x20000004

08002fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fb0:	f7ff fff0 	bl	8002f94 <HAL_RCC_GetHCLKFreq>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	0a9b      	lsrs	r3, r3, #10
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	4903      	ldr	r1, [pc, #12]	; (8002fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fc2:	5ccb      	ldrb	r3, [r1, r3]
 8002fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	08005b20 	.word	0x08005b20

08002fd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fd8:	f7ff ffdc 	bl	8002f94 <HAL_RCC_GetHCLKFreq>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	0b5b      	lsrs	r3, r3, #13
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	4903      	ldr	r1, [pc, #12]	; (8002ff8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fea:	5ccb      	ldrb	r3, [r1, r3]
 8002fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	08005b20 	.word	0x08005b20

08002ffc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e041      	b.n	8003092 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d106      	bne.n	8003028 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7fe fb54 	bl	80016d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3304      	adds	r3, #4
 8003038:	4619      	mov	r1, r3
 800303a:	4610      	mov	r0, r2
 800303c:	f000 fea2 	bl	8003d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d001      	beq.n	80030b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e03c      	b.n	800312e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2202      	movs	r2, #2
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a1e      	ldr	r2, [pc, #120]	; (800313c <HAL_TIM_Base_Start+0xa0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d018      	beq.n	80030f8 <HAL_TIM_Base_Start+0x5c>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ce:	d013      	beq.n	80030f8 <HAL_TIM_Base_Start+0x5c>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a1a      	ldr	r2, [pc, #104]	; (8003140 <HAL_TIM_Base_Start+0xa4>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00e      	beq.n	80030f8 <HAL_TIM_Base_Start+0x5c>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a19      	ldr	r2, [pc, #100]	; (8003144 <HAL_TIM_Base_Start+0xa8>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d009      	beq.n	80030f8 <HAL_TIM_Base_Start+0x5c>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a17      	ldr	r2, [pc, #92]	; (8003148 <HAL_TIM_Base_Start+0xac>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d004      	beq.n	80030f8 <HAL_TIM_Base_Start+0x5c>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a16      	ldr	r2, [pc, #88]	; (800314c <HAL_TIM_Base_Start+0xb0>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d111      	bne.n	800311c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2b06      	cmp	r3, #6
 8003108:	d010      	beq.n	800312c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f042 0201 	orr.w	r2, r2, #1
 8003118:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800311a:	e007      	b.n	800312c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40010000 	.word	0x40010000
 8003140:	40000400 	.word	0x40000400
 8003144:	40000800 	.word	0x40000800
 8003148:	40000c00 	.word	0x40000c00
 800314c:	40014000 	.word	0x40014000

08003150 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e041      	b.n	80031e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d106      	bne.n	800317c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7fe fa88 	bl	800168c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3304      	adds	r3, #4
 800318c:	4619      	mov	r1, r3
 800318e:	4610      	mov	r0, r2
 8003190:	f000 fdf8 	bl	8003d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
	...

080031f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d109      	bne.n	8003214 <HAL_TIM_PWM_Start+0x24>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b01      	cmp	r3, #1
 800320a:	bf14      	ite	ne
 800320c:	2301      	movne	r3, #1
 800320e:	2300      	moveq	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	e022      	b.n	800325a <HAL_TIM_PWM_Start+0x6a>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	2b04      	cmp	r3, #4
 8003218:	d109      	bne.n	800322e <HAL_TIM_PWM_Start+0x3e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b01      	cmp	r3, #1
 8003224:	bf14      	ite	ne
 8003226:	2301      	movne	r3, #1
 8003228:	2300      	moveq	r3, #0
 800322a:	b2db      	uxtb	r3, r3
 800322c:	e015      	b.n	800325a <HAL_TIM_PWM_Start+0x6a>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b08      	cmp	r3, #8
 8003232:	d109      	bne.n	8003248 <HAL_TIM_PWM_Start+0x58>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b01      	cmp	r3, #1
 800323e:	bf14      	ite	ne
 8003240:	2301      	movne	r3, #1
 8003242:	2300      	moveq	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	e008      	b.n	800325a <HAL_TIM_PWM_Start+0x6a>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b01      	cmp	r3, #1
 8003252:	bf14      	ite	ne
 8003254:	2301      	movne	r3, #1
 8003256:	2300      	moveq	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e068      	b.n	8003334 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d104      	bne.n	8003272 <HAL_TIM_PWM_Start+0x82>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003270:	e013      	b.n	800329a <HAL_TIM_PWM_Start+0xaa>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b04      	cmp	r3, #4
 8003276:	d104      	bne.n	8003282 <HAL_TIM_PWM_Start+0x92>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003280:	e00b      	b.n	800329a <HAL_TIM_PWM_Start+0xaa>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b08      	cmp	r3, #8
 8003286:	d104      	bne.n	8003292 <HAL_TIM_PWM_Start+0xa2>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003290:	e003      	b.n	800329a <HAL_TIM_PWM_Start+0xaa>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2202      	movs	r2, #2
 8003296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2201      	movs	r2, #1
 80032a0:	6839      	ldr	r1, [r7, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f001 f932 	bl	800450c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a23      	ldr	r2, [pc, #140]	; (800333c <HAL_TIM_PWM_Start+0x14c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d107      	bne.n	80032c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a1d      	ldr	r2, [pc, #116]	; (800333c <HAL_TIM_PWM_Start+0x14c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d018      	beq.n	80032fe <HAL_TIM_PWM_Start+0x10e>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d4:	d013      	beq.n	80032fe <HAL_TIM_PWM_Start+0x10e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a19      	ldr	r2, [pc, #100]	; (8003340 <HAL_TIM_PWM_Start+0x150>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d00e      	beq.n	80032fe <HAL_TIM_PWM_Start+0x10e>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a17      	ldr	r2, [pc, #92]	; (8003344 <HAL_TIM_PWM_Start+0x154>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d009      	beq.n	80032fe <HAL_TIM_PWM_Start+0x10e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a16      	ldr	r2, [pc, #88]	; (8003348 <HAL_TIM_PWM_Start+0x158>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d004      	beq.n	80032fe <HAL_TIM_PWM_Start+0x10e>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a14      	ldr	r2, [pc, #80]	; (800334c <HAL_TIM_PWM_Start+0x15c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d111      	bne.n	8003322 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2b06      	cmp	r3, #6
 800330e:	d010      	beq.n	8003332 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003320:	e007      	b.n	8003332 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f042 0201 	orr.w	r2, r2, #1
 8003330:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40010000 	.word	0x40010000
 8003340:	40000400 	.word	0x40000400
 8003344:	40000800 	.word	0x40000800
 8003348:	40000c00 	.word	0x40000c00
 800334c:	40014000 	.word	0x40014000

08003350 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e041      	b.n	80033e6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f839 	bl	80033ee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3304      	adds	r3, #4
 800338c:	4619      	mov	r1, r3
 800338e:	4610      	mov	r0, r2
 8003390:	f000 fcf8 	bl	8003d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
	...

08003404 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003412:	2300      	movs	r3, #0
 8003414:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d104      	bne.n	8003426 <HAL_TIM_IC_Start_DMA+0x22>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003422:	b2db      	uxtb	r3, r3
 8003424:	e013      	b.n	800344e <HAL_TIM_IC_Start_DMA+0x4a>
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2b04      	cmp	r3, #4
 800342a:	d104      	bne.n	8003436 <HAL_TIM_IC_Start_DMA+0x32>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003432:	b2db      	uxtb	r3, r3
 8003434:	e00b      	b.n	800344e <HAL_TIM_IC_Start_DMA+0x4a>
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b08      	cmp	r3, #8
 800343a:	d104      	bne.n	8003446 <HAL_TIM_IC_Start_DMA+0x42>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003442:	b2db      	uxtb	r3, r3
 8003444:	e003      	b.n	800344e <HAL_TIM_IC_Start_DMA+0x4a>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800344c:	b2db      	uxtb	r3, r3
 800344e:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d104      	bne.n	8003460 <HAL_TIM_IC_Start_DMA+0x5c>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800345c:	b2db      	uxtb	r3, r3
 800345e:	e013      	b.n	8003488 <HAL_TIM_IC_Start_DMA+0x84>
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2b04      	cmp	r3, #4
 8003464:	d104      	bne.n	8003470 <HAL_TIM_IC_Start_DMA+0x6c>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800346c:	b2db      	uxtb	r3, r3
 800346e:	e00b      	b.n	8003488 <HAL_TIM_IC_Start_DMA+0x84>
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b08      	cmp	r3, #8
 8003474:	d104      	bne.n	8003480 <HAL_TIM_IC_Start_DMA+0x7c>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800347c:	b2db      	uxtb	r3, r3
 800347e:	e003      	b.n	8003488 <HAL_TIM_IC_Start_DMA+0x84>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003486:	b2db      	uxtb	r3, r3
 8003488:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800348a:	7dbb      	ldrb	r3, [r7, #22]
 800348c:	2b02      	cmp	r3, #2
 800348e:	d002      	beq.n	8003496 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8003490:	7d7b      	ldrb	r3, [r7, #21]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d101      	bne.n	800349a <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8003496:	2302      	movs	r3, #2
 8003498:	e13c      	b.n	8003714 <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800349a:	7dbb      	ldrb	r3, [r7, #22]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d143      	bne.n	8003528 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 80034a0:	7d7b      	ldrb	r3, [r7, #21]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d140      	bne.n	8003528 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d104      	bne.n	80034b6 <HAL_TIM_IC_Start_DMA+0xb2>
 80034ac:	887b      	ldrh	r3, [r7, #2]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e12e      	b.n	8003714 <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d104      	bne.n	80034c6 <HAL_TIM_IC_Start_DMA+0xc2>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2202      	movs	r2, #2
 80034c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034c4:	e013      	b.n	80034ee <HAL_TIM_IC_Start_DMA+0xea>
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d104      	bne.n	80034d6 <HAL_TIM_IC_Start_DMA+0xd2>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034d4:	e00b      	b.n	80034ee <HAL_TIM_IC_Start_DMA+0xea>
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d104      	bne.n	80034e6 <HAL_TIM_IC_Start_DMA+0xe2>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034e4:	e003      	b.n	80034ee <HAL_TIM_IC_Start_DMA+0xea>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2202      	movs	r2, #2
 80034ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d104      	bne.n	80034fe <HAL_TIM_IC_Start_DMA+0xfa>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 80034fc:	e016      	b.n	800352c <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b04      	cmp	r3, #4
 8003502:	d104      	bne.n	800350e <HAL_TIM_IC_Start_DMA+0x10a>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 800350c:	e00e      	b.n	800352c <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	2b08      	cmp	r3, #8
 8003512:	d104      	bne.n	800351e <HAL_TIM_IC_Start_DMA+0x11a>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2202      	movs	r2, #2
 8003518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 800351c:	e006      	b.n	800352c <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2202      	movs	r2, #2
 8003522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8003526:	e001      	b.n	800352c <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0f3      	b.n	8003714 <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2201      	movs	r2, #1
 8003532:	68b9      	ldr	r1, [r7, #8]
 8003534:	4618      	mov	r0, r3
 8003536:	f000 ffe9 	bl	800450c <TIM_CCxChannelCmd>

  switch (Channel)
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2b0c      	cmp	r3, #12
 800353e:	f200 80ad 	bhi.w	800369c <HAL_TIM_IC_Start_DMA+0x298>
 8003542:	a201      	add	r2, pc, #4	; (adr r2, 8003548 <HAL_TIM_IC_Start_DMA+0x144>)
 8003544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003548:	0800357d 	.word	0x0800357d
 800354c:	0800369d 	.word	0x0800369d
 8003550:	0800369d 	.word	0x0800369d
 8003554:	0800369d 	.word	0x0800369d
 8003558:	080035c5 	.word	0x080035c5
 800355c:	0800369d 	.word	0x0800369d
 8003560:	0800369d 	.word	0x0800369d
 8003564:	0800369d 	.word	0x0800369d
 8003568:	0800360d 	.word	0x0800360d
 800356c:	0800369d 	.word	0x0800369d
 8003570:	0800369d 	.word	0x0800369d
 8003574:	0800369d 	.word	0x0800369d
 8003578:	08003655 	.word	0x08003655
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	4a66      	ldr	r2, [pc, #408]	; (800371c <HAL_TIM_IC_Start_DMA+0x318>)
 8003582:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	4a65      	ldr	r2, [pc, #404]	; (8003720 <HAL_TIM_IC_Start_DMA+0x31c>)
 800358a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	4a64      	ldr	r2, [pc, #400]	; (8003724 <HAL_TIM_IC_Start_DMA+0x320>)
 8003592:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3334      	adds	r3, #52	; 0x34
 800359e:	4619      	mov	r1, r3
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	887b      	ldrh	r3, [r7, #2]
 80035a4:	f7fe fc32 	bl	8001e0c <HAL_DMA_Start_IT>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e0b0      	b.n	8003714 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c0:	60da      	str	r2, [r3, #12]
      break;
 80035c2:	e06e      	b.n	80036a2 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c8:	4a54      	ldr	r2, [pc, #336]	; (800371c <HAL_TIM_IC_Start_DMA+0x318>)
 80035ca:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d0:	4a53      	ldr	r2, [pc, #332]	; (8003720 <HAL_TIM_IC_Start_DMA+0x31c>)
 80035d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d8:	4a52      	ldr	r2, [pc, #328]	; (8003724 <HAL_TIM_IC_Start_DMA+0x320>)
 80035da:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3338      	adds	r3, #56	; 0x38
 80035e6:	4619      	mov	r1, r3
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	887b      	ldrh	r3, [r7, #2]
 80035ec:	f7fe fc0e 	bl	8001e0c <HAL_DMA_Start_IT>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e08c      	b.n	8003714 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68da      	ldr	r2, [r3, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003608:	60da      	str	r2, [r3, #12]
      break;
 800360a:	e04a      	b.n	80036a2 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	4a42      	ldr	r2, [pc, #264]	; (800371c <HAL_TIM_IC_Start_DMA+0x318>)
 8003612:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	4a41      	ldr	r2, [pc, #260]	; (8003720 <HAL_TIM_IC_Start_DMA+0x31c>)
 800361a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	4a40      	ldr	r2, [pc, #256]	; (8003724 <HAL_TIM_IC_Start_DMA+0x320>)
 8003622:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	333c      	adds	r3, #60	; 0x3c
 800362e:	4619      	mov	r1, r3
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	887b      	ldrh	r3, [r7, #2]
 8003634:	f7fe fbea 	bl	8001e0c <HAL_DMA_Start_IT>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e068      	b.n	8003714 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68da      	ldr	r2, [r3, #12]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003650:	60da      	str	r2, [r3, #12]
      break;
 8003652:	e026      	b.n	80036a2 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003658:	4a30      	ldr	r2, [pc, #192]	; (800371c <HAL_TIM_IC_Start_DMA+0x318>)
 800365a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003660:	4a2f      	ldr	r2, [pc, #188]	; (8003720 <HAL_TIM_IC_Start_DMA+0x31c>)
 8003662:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	4a2e      	ldr	r2, [pc, #184]	; (8003724 <HAL_TIM_IC_Start_DMA+0x320>)
 800366a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	3340      	adds	r3, #64	; 0x40
 8003676:	4619      	mov	r1, r3
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	887b      	ldrh	r3, [r7, #2]
 800367c:	f7fe fbc6 	bl	8001e0c <HAL_DMA_Start_IT>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e044      	b.n	8003714 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003698:	60da      	str	r2, [r3, #12]
      break;
 800369a:	e002      	b.n	80036a2 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	75fb      	strb	r3, [r7, #23]
      break;
 80036a0:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a20      	ldr	r2, [pc, #128]	; (8003728 <HAL_TIM_IC_Start_DMA+0x324>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d018      	beq.n	80036de <HAL_TIM_IC_Start_DMA+0x2da>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b4:	d013      	beq.n	80036de <HAL_TIM_IC_Start_DMA+0x2da>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a1c      	ldr	r2, [pc, #112]	; (800372c <HAL_TIM_IC_Start_DMA+0x328>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d00e      	beq.n	80036de <HAL_TIM_IC_Start_DMA+0x2da>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a1a      	ldr	r2, [pc, #104]	; (8003730 <HAL_TIM_IC_Start_DMA+0x32c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d009      	beq.n	80036de <HAL_TIM_IC_Start_DMA+0x2da>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a19      	ldr	r2, [pc, #100]	; (8003734 <HAL_TIM_IC_Start_DMA+0x330>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d004      	beq.n	80036de <HAL_TIM_IC_Start_DMA+0x2da>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a17      	ldr	r2, [pc, #92]	; (8003738 <HAL_TIM_IC_Start_DMA+0x334>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d111      	bne.n	8003702 <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	2b06      	cmp	r3, #6
 80036ee:	d010      	beq.n	8003712 <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003700:	e007      	b.n	8003712 <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f042 0201 	orr.w	r2, r2, #1
 8003710:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003712:	7dfb      	ldrb	r3, [r7, #23]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	08003c55 	.word	0x08003c55
 8003720:	08003d1d 	.word	0x08003d1d
 8003724:	08003bc3 	.word	0x08003bc3
 8003728:	40010000 	.word	0x40010000
 800372c:	40000400 	.word	0x40000400
 8003730:	40000800 	.word	0x40000800
 8003734:	40000c00 	.word	0x40000c00
 8003738:	40014000 	.word	0x40014000

0800373c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003748:	2300      	movs	r3, #0
 800374a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003756:	2302      	movs	r3, #2
 8003758:	e088      	b.n	800386c <HAL_TIM_IC_ConfigChannel+0x130>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d11b      	bne.n	80037a0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	6819      	ldr	r1, [r3, #0]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f000 fd10 	bl	800419c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699a      	ldr	r2, [r3, #24]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 020c 	bic.w	r2, r2, #12
 800378a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6999      	ldr	r1, [r3, #24]
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	619a      	str	r2, [r3, #24]
 800379e:	e060      	b.n	8003862 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d11c      	bne.n	80037e0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	6819      	ldr	r1, [r3, #0]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f000 fd88 	bl	80042ca <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	699a      	ldr	r2, [r3, #24]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80037c8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6999      	ldr	r1, [r3, #24]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	021a      	lsls	r2, r3, #8
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	619a      	str	r2, [r3, #24]
 80037de:	e040      	b.n	8003862 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b08      	cmp	r3, #8
 80037e4:	d11b      	bne.n	800381e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6818      	ldr	r0, [r3, #0]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	6819      	ldr	r1, [r3, #0]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f000 fdd5 	bl	80043a4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	69da      	ldr	r2, [r3, #28]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 020c 	bic.w	r2, r2, #12
 8003808:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	69d9      	ldr	r1, [r3, #28]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	61da      	str	r2, [r3, #28]
 800381c:	e021      	b.n	8003862 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b0c      	cmp	r3, #12
 8003822:	d11c      	bne.n	800385e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6818      	ldr	r0, [r3, #0]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	6819      	ldr	r1, [r3, #0]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f000 fdf2 	bl	800441c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	69da      	ldr	r2, [r3, #28]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003846:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	69d9      	ldr	r1, [r3, #28]
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	021a      	lsls	r2, r3, #8
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	61da      	str	r2, [r3, #28]
 800385c:	e001      	b.n	8003862 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800386a:	7dfb      	ldrb	r3, [r7, #23]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800388a:	2b01      	cmp	r3, #1
 800388c:	d101      	bne.n	8003892 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800388e:	2302      	movs	r3, #2
 8003890:	e0ae      	b.n	80039f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b0c      	cmp	r3, #12
 800389e:	f200 809f 	bhi.w	80039e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80038a2:	a201      	add	r2, pc, #4	; (adr r2, 80038a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a8:	080038dd 	.word	0x080038dd
 80038ac:	080039e1 	.word	0x080039e1
 80038b0:	080039e1 	.word	0x080039e1
 80038b4:	080039e1 	.word	0x080039e1
 80038b8:	0800391d 	.word	0x0800391d
 80038bc:	080039e1 	.word	0x080039e1
 80038c0:	080039e1 	.word	0x080039e1
 80038c4:	080039e1 	.word	0x080039e1
 80038c8:	0800395f 	.word	0x0800395f
 80038cc:	080039e1 	.word	0x080039e1
 80038d0:	080039e1 	.word	0x080039e1
 80038d4:	080039e1 	.word	0x080039e1
 80038d8:	0800399f 	.word	0x0800399f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68b9      	ldr	r1, [r7, #8]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 face 	bl	8003e84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699a      	ldr	r2, [r3, #24]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0208 	orr.w	r2, r2, #8
 80038f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	699a      	ldr	r2, [r3, #24]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0204 	bic.w	r2, r2, #4
 8003906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6999      	ldr	r1, [r3, #24]
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	691a      	ldr	r2, [r3, #16]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	619a      	str	r2, [r3, #24]
      break;
 800391a:	e064      	b.n	80039e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68b9      	ldr	r1, [r7, #8]
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fb14 	bl	8003f50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699a      	ldr	r2, [r3, #24]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6999      	ldr	r1, [r3, #24]
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	021a      	lsls	r2, r3, #8
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	619a      	str	r2, [r3, #24]
      break;
 800395c:	e043      	b.n	80039e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68b9      	ldr	r1, [r7, #8]
 8003964:	4618      	mov	r0, r3
 8003966:	f000 fb5f 	bl	8004028 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	69da      	ldr	r2, [r3, #28]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f042 0208 	orr.w	r2, r2, #8
 8003978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	69da      	ldr	r2, [r3, #28]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0204 	bic.w	r2, r2, #4
 8003988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69d9      	ldr	r1, [r3, #28]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	691a      	ldr	r2, [r3, #16]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	61da      	str	r2, [r3, #28]
      break;
 800399c:	e023      	b.n	80039e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68b9      	ldr	r1, [r7, #8]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 fba9 	bl	80040fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69da      	ldr	r2, [r3, #28]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69da      	ldr	r2, [r3, #28]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69d9      	ldr	r1, [r3, #28]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	021a      	lsls	r2, r3, #8
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	61da      	str	r2, [r3, #28]
      break;
 80039de:	e002      	b.n	80039e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	75fb      	strb	r3, [r7, #23]
      break;
 80039e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_TIM_ConfigClockSource+0x1c>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e0b4      	b.n	8003b7e <HAL_TIM_ConfigClockSource+0x186>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a4c:	d03e      	beq.n	8003acc <HAL_TIM_ConfigClockSource+0xd4>
 8003a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a52:	f200 8087 	bhi.w	8003b64 <HAL_TIM_ConfigClockSource+0x16c>
 8003a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a5a:	f000 8086 	beq.w	8003b6a <HAL_TIM_ConfigClockSource+0x172>
 8003a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a62:	d87f      	bhi.n	8003b64 <HAL_TIM_ConfigClockSource+0x16c>
 8003a64:	2b70      	cmp	r3, #112	; 0x70
 8003a66:	d01a      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0xa6>
 8003a68:	2b70      	cmp	r3, #112	; 0x70
 8003a6a:	d87b      	bhi.n	8003b64 <HAL_TIM_ConfigClockSource+0x16c>
 8003a6c:	2b60      	cmp	r3, #96	; 0x60
 8003a6e:	d050      	beq.n	8003b12 <HAL_TIM_ConfigClockSource+0x11a>
 8003a70:	2b60      	cmp	r3, #96	; 0x60
 8003a72:	d877      	bhi.n	8003b64 <HAL_TIM_ConfigClockSource+0x16c>
 8003a74:	2b50      	cmp	r3, #80	; 0x50
 8003a76:	d03c      	beq.n	8003af2 <HAL_TIM_ConfigClockSource+0xfa>
 8003a78:	2b50      	cmp	r3, #80	; 0x50
 8003a7a:	d873      	bhi.n	8003b64 <HAL_TIM_ConfigClockSource+0x16c>
 8003a7c:	2b40      	cmp	r3, #64	; 0x40
 8003a7e:	d058      	beq.n	8003b32 <HAL_TIM_ConfigClockSource+0x13a>
 8003a80:	2b40      	cmp	r3, #64	; 0x40
 8003a82:	d86f      	bhi.n	8003b64 <HAL_TIM_ConfigClockSource+0x16c>
 8003a84:	2b30      	cmp	r3, #48	; 0x30
 8003a86:	d064      	beq.n	8003b52 <HAL_TIM_ConfigClockSource+0x15a>
 8003a88:	2b30      	cmp	r3, #48	; 0x30
 8003a8a:	d86b      	bhi.n	8003b64 <HAL_TIM_ConfigClockSource+0x16c>
 8003a8c:	2b20      	cmp	r3, #32
 8003a8e:	d060      	beq.n	8003b52 <HAL_TIM_ConfigClockSource+0x15a>
 8003a90:	2b20      	cmp	r3, #32
 8003a92:	d867      	bhi.n	8003b64 <HAL_TIM_ConfigClockSource+0x16c>
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d05c      	beq.n	8003b52 <HAL_TIM_ConfigClockSource+0x15a>
 8003a98:	2b10      	cmp	r3, #16
 8003a9a:	d05a      	beq.n	8003b52 <HAL_TIM_ConfigClockSource+0x15a>
 8003a9c:	e062      	b.n	8003b64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	6899      	ldr	r1, [r3, #8]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f000 fd0d 	bl	80044cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ac0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	609a      	str	r2, [r3, #8]
      break;
 8003aca:	e04f      	b.n	8003b6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6818      	ldr	r0, [r3, #0]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	6899      	ldr	r1, [r3, #8]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f000 fcf6 	bl	80044cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003aee:	609a      	str	r2, [r3, #8]
      break;
 8003af0:	e03c      	b.n	8003b6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6818      	ldr	r0, [r3, #0]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	6859      	ldr	r1, [r3, #4]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	461a      	mov	r2, r3
 8003b00:	f000 fbb4 	bl	800426c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2150      	movs	r1, #80	; 0x50
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 fcc3 	bl	8004496 <TIM_ITRx_SetConfig>
      break;
 8003b10:	e02c      	b.n	8003b6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6818      	ldr	r0, [r3, #0]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	6859      	ldr	r1, [r3, #4]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f000 fc10 	bl	8004344 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2160      	movs	r1, #96	; 0x60
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 fcb3 	bl	8004496 <TIM_ITRx_SetConfig>
      break;
 8003b30:	e01c      	b.n	8003b6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	6859      	ldr	r1, [r3, #4]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	f000 fb94 	bl	800426c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2140      	movs	r1, #64	; 0x40
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 fca3 	bl	8004496 <TIM_ITRx_SetConfig>
      break;
 8003b50:	e00c      	b.n	8003b6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4610      	mov	r0, r2
 8003b5e:	f000 fc9a 	bl	8004496 <TIM_ITRx_SetConfig>
      break;
 8003b62:	e003      	b.n	8003b6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	73fb      	strb	r3, [r7, #15]
      break;
 8003b68:	e000      	b.n	8003b6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bce:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d107      	bne.n	8003bea <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003be8:	e02a      	b.n	8003c40 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d107      	bne.n	8003c04 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c02:	e01d      	b.n	8003c40 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d107      	bne.n	8003c1e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2204      	movs	r2, #4
 8003c12:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c1c:	e010      	b.n	8003c40 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d107      	bne.n	8003c38 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2208      	movs	r2, #8
 8003c2c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c36:	e003      	b.n	8003c40 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f7ff ffb4 	bl	8003bae <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	771a      	strb	r2, [r3, #28]
}
 8003c4c:	bf00      	nop
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c60:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d10f      	bne.n	8003c8c <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d146      	bne.n	8003d08 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c8a:	e03d      	b.n	8003d08 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d10f      	bne.n	8003cb6 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2202      	movs	r2, #2
 8003c9a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d131      	bne.n	8003d08 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cb4:	e028      	b.n	8003d08 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d10f      	bne.n	8003ce0 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2204      	movs	r2, #4
 8003cc4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d11c      	bne.n	8003d08 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cde:	e013      	b.n	8003d08 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d10e      	bne.n	8003d08 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2208      	movs	r2, #8
 8003cee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d107      	bne.n	8003d08 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f7ff ff3c 	bl	8003b86 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	771a      	strb	r2, [r3, #28]
}
 8003d14:	bf00      	nop
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d28:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d103      	bne.n	8003d3c <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	771a      	strb	r2, [r3, #28]
 8003d3a:	e019      	b.n	8003d70 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d103      	bne.n	8003d4e <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2202      	movs	r2, #2
 8003d4a:	771a      	strb	r2, [r3, #28]
 8003d4c:	e010      	b.n	8003d70 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d103      	bne.n	8003d60 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2204      	movs	r2, #4
 8003d5c:	771a      	strb	r2, [r3, #28]
 8003d5e:	e007      	b.n	8003d70 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d102      	bne.n	8003d70 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2208      	movs	r2, #8
 8003d6e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f7ff ff12 	bl	8003b9a <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	771a      	strb	r2, [r3, #28]
}
 8003d7c:	bf00      	nop
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a34      	ldr	r2, [pc, #208]	; (8003e68 <TIM_Base_SetConfig+0xe4>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d00f      	beq.n	8003dbc <TIM_Base_SetConfig+0x38>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da2:	d00b      	beq.n	8003dbc <TIM_Base_SetConfig+0x38>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a31      	ldr	r2, [pc, #196]	; (8003e6c <TIM_Base_SetConfig+0xe8>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d007      	beq.n	8003dbc <TIM_Base_SetConfig+0x38>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a30      	ldr	r2, [pc, #192]	; (8003e70 <TIM_Base_SetConfig+0xec>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d003      	beq.n	8003dbc <TIM_Base_SetConfig+0x38>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a2f      	ldr	r2, [pc, #188]	; (8003e74 <TIM_Base_SetConfig+0xf0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d108      	bne.n	8003dce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a25      	ldr	r2, [pc, #148]	; (8003e68 <TIM_Base_SetConfig+0xe4>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d01b      	beq.n	8003e0e <TIM_Base_SetConfig+0x8a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ddc:	d017      	beq.n	8003e0e <TIM_Base_SetConfig+0x8a>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a22      	ldr	r2, [pc, #136]	; (8003e6c <TIM_Base_SetConfig+0xe8>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d013      	beq.n	8003e0e <TIM_Base_SetConfig+0x8a>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a21      	ldr	r2, [pc, #132]	; (8003e70 <TIM_Base_SetConfig+0xec>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d00f      	beq.n	8003e0e <TIM_Base_SetConfig+0x8a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a20      	ldr	r2, [pc, #128]	; (8003e74 <TIM_Base_SetConfig+0xf0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00b      	beq.n	8003e0e <TIM_Base_SetConfig+0x8a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a1f      	ldr	r2, [pc, #124]	; (8003e78 <TIM_Base_SetConfig+0xf4>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d007      	beq.n	8003e0e <TIM_Base_SetConfig+0x8a>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a1e      	ldr	r2, [pc, #120]	; (8003e7c <TIM_Base_SetConfig+0xf8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d003      	beq.n	8003e0e <TIM_Base_SetConfig+0x8a>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a1d      	ldr	r2, [pc, #116]	; (8003e80 <TIM_Base_SetConfig+0xfc>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d108      	bne.n	8003e20 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a08      	ldr	r2, [pc, #32]	; (8003e68 <TIM_Base_SetConfig+0xe4>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d103      	bne.n	8003e54 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	615a      	str	r2, [r3, #20]
}
 8003e5a:	bf00      	nop
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	40010000 	.word	0x40010000
 8003e6c:	40000400 	.word	0x40000400
 8003e70:	40000800 	.word	0x40000800
 8003e74:	40000c00 	.word	0x40000c00
 8003e78:	40014000 	.word	0x40014000
 8003e7c:	40014400 	.word	0x40014400
 8003e80:	40014800 	.word	0x40014800

08003e84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b087      	sub	sp, #28
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	f023 0201 	bic.w	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0303 	bic.w	r3, r3, #3
 8003eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	f023 0302 	bic.w	r3, r3, #2
 8003ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a1c      	ldr	r2, [pc, #112]	; (8003f4c <TIM_OC1_SetConfig+0xc8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d10c      	bne.n	8003efa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f023 0308 	bic.w	r3, r3, #8
 8003ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f023 0304 	bic.w	r3, r3, #4
 8003ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a13      	ldr	r2, [pc, #76]	; (8003f4c <TIM_OC1_SetConfig+0xc8>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d111      	bne.n	8003f26 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	621a      	str	r2, [r3, #32]
}
 8003f40:	bf00      	nop
 8003f42:	371c      	adds	r7, #28
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	40010000 	.word	0x40010000

08003f50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	f023 0210 	bic.w	r2, r3, #16
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	021b      	lsls	r3, r3, #8
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f023 0320 	bic.w	r3, r3, #32
 8003f9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a1e      	ldr	r2, [pc, #120]	; (8004024 <TIM_OC2_SetConfig+0xd4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d10d      	bne.n	8003fcc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a15      	ldr	r2, [pc, #84]	; (8004024 <TIM_OC2_SetConfig+0xd4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d113      	bne.n	8003ffc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	621a      	str	r2, [r3, #32]
}
 8004016:	bf00      	nop
 8004018:	371c      	adds	r7, #28
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	40010000 	.word	0x40010000

08004028 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0303 	bic.w	r3, r3, #3
 800405e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	4313      	orrs	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	021b      	lsls	r3, r3, #8
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	4313      	orrs	r3, r2
 800407c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a1d      	ldr	r2, [pc, #116]	; (80040f8 <TIM_OC3_SetConfig+0xd0>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d10d      	bne.n	80040a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800408c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	021b      	lsls	r3, r3, #8
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	4313      	orrs	r3, r2
 8004098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a14      	ldr	r2, [pc, #80]	; (80040f8 <TIM_OC3_SetConfig+0xd0>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d113      	bne.n	80040d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	621a      	str	r2, [r3, #32]
}
 80040ec:	bf00      	nop
 80040ee:	371c      	adds	r7, #28
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	40010000 	.word	0x40010000

080040fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b087      	sub	sp, #28
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800412a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	021b      	lsls	r3, r3, #8
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	4313      	orrs	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004146:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	031b      	lsls	r3, r3, #12
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a10      	ldr	r2, [pc, #64]	; (8004198 <TIM_OC4_SetConfig+0x9c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d109      	bne.n	8004170 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004162:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	019b      	lsls	r3, r3, #6
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	621a      	str	r2, [r3, #32]
}
 800418a:	bf00      	nop
 800418c:	371c      	adds	r7, #28
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40010000 	.word	0x40010000

0800419c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800419c:	b480      	push	{r7}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
 80041a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	f023 0201 	bic.w	r2, r3, #1
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4a24      	ldr	r2, [pc, #144]	; (8004258 <TIM_TI1_SetConfig+0xbc>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d013      	beq.n	80041f2 <TIM_TI1_SetConfig+0x56>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d0:	d00f      	beq.n	80041f2 <TIM_TI1_SetConfig+0x56>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	4a21      	ldr	r2, [pc, #132]	; (800425c <TIM_TI1_SetConfig+0xc0>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d00b      	beq.n	80041f2 <TIM_TI1_SetConfig+0x56>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	4a20      	ldr	r2, [pc, #128]	; (8004260 <TIM_TI1_SetConfig+0xc4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d007      	beq.n	80041f2 <TIM_TI1_SetConfig+0x56>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4a1f      	ldr	r2, [pc, #124]	; (8004264 <TIM_TI1_SetConfig+0xc8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d003      	beq.n	80041f2 <TIM_TI1_SetConfig+0x56>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4a1e      	ldr	r2, [pc, #120]	; (8004268 <TIM_TI1_SetConfig+0xcc>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d101      	bne.n	80041f6 <TIM_TI1_SetConfig+0x5a>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <TIM_TI1_SetConfig+0x5c>
 80041f6:	2300      	movs	r3, #0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f023 0303 	bic.w	r3, r3, #3
 8004202:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4313      	orrs	r3, r2
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	e003      	b.n	8004216 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f043 0301 	orr.w	r3, r3, #1
 8004214:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800421c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	b2db      	uxtb	r3, r3
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f023 030a 	bic.w	r3, r3, #10
 8004230:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f003 030a 	and.w	r3, r3, #10
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	621a      	str	r2, [r3, #32]
}
 800424a:	bf00      	nop
 800424c:	371c      	adds	r7, #28
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40010000 	.word	0x40010000
 800425c:	40000400 	.word	0x40000400
 8004260:	40000800 	.word	0x40000800
 8004264:	40000c00 	.word	0x40000c00
 8004268:	40014000 	.word	0x40014000

0800426c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800426c:	b480      	push	{r7}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	f023 0201 	bic.w	r2, r3, #1
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f023 030a 	bic.w	r3, r3, #10
 80042a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	621a      	str	r2, [r3, #32]
}
 80042be:	bf00      	nop
 80042c0:	371c      	adds	r7, #28
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b087      	sub	sp, #28
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	60f8      	str	r0, [r7, #12]
 80042d2:	60b9      	str	r1, [r7, #8]
 80042d4:	607a      	str	r2, [r7, #4]
 80042d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	f023 0210 	bic.w	r2, r3, #16
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	021b      	lsls	r3, r3, #8
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	4313      	orrs	r3, r2
 8004300:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004308:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	031b      	lsls	r3, r3, #12
 800430e:	b29b      	uxth	r3, r3
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	4313      	orrs	r3, r2
 8004314:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800431c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	4313      	orrs	r3, r2
 800432a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	621a      	str	r2, [r3, #32]
}
 8004338:	bf00      	nop
 800433a:	371c      	adds	r7, #28
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	f023 0210 	bic.w	r2, r3, #16
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800436e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	031b      	lsls	r3, r3, #12
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	4313      	orrs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004380:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4313      	orrs	r3, r2
 800438a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	621a      	str	r2, [r3, #32]
}
 8004398:	bf00      	nop
 800439a:	371c      	adds	r7, #28
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
 80043b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f023 0303 	bic.w	r3, r3, #3
 80043d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80043f4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	021b      	lsls	r3, r3, #8
 80043fa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	4313      	orrs	r3, r2
 8004402:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	621a      	str	r2, [r3, #32]
}
 8004410:	bf00      	nop
 8004412:	371c      	adds	r7, #28
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
 8004428:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004448:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	021b      	lsls	r3, r3, #8
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	4313      	orrs	r3, r2
 8004452:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800445a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	031b      	lsls	r3, r3, #12
 8004460:	b29b      	uxth	r3, r3
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	4313      	orrs	r3, r2
 8004466:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800446e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	031b      	lsls	r3, r3, #12
 8004474:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	4313      	orrs	r3, r2
 800447c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	621a      	str	r2, [r3, #32]
}
 800448a:	bf00      	nop
 800448c:	371c      	adds	r7, #28
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004496:	b480      	push	{r7}
 8004498:	b085      	sub	sp, #20
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f043 0307 	orr.w	r3, r3, #7
 80044b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	609a      	str	r2, [r3, #8]
}
 80044c0:	bf00      	nop
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	021a      	lsls	r2, r3, #8
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	431a      	orrs	r2, r3
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	609a      	str	r2, [r3, #8]
}
 8004500:	bf00      	nop
 8004502:	371c      	adds	r7, #28
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800450c:	b480      	push	{r7}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	2201      	movs	r2, #1
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6a1a      	ldr	r2, [r3, #32]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	43db      	mvns	r3, r3
 800452e:	401a      	ands	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a1a      	ldr	r2, [r3, #32]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f003 031f 	and.w	r3, r3, #31
 800453e:	6879      	ldr	r1, [r7, #4]
 8004540:	fa01 f303 	lsl.w	r3, r1, r3
 8004544:	431a      	orrs	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	621a      	str	r2, [r3, #32]
}
 800454a:	bf00      	nop
 800454c:	371c      	adds	r7, #28
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
	...

08004558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800456c:	2302      	movs	r3, #2
 800456e:	e050      	b.n	8004612 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004596:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	4313      	orrs	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a1c      	ldr	r2, [pc, #112]	; (8004620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d018      	beq.n	80045e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045bc:	d013      	beq.n	80045e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a18      	ldr	r2, [pc, #96]	; (8004624 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d00e      	beq.n	80045e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a16      	ldr	r2, [pc, #88]	; (8004628 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d009      	beq.n	80045e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a15      	ldr	r2, [pc, #84]	; (800462c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d004      	beq.n	80045e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a13      	ldr	r2, [pc, #76]	; (8004630 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d10c      	bne.n	8004600 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	40010000 	.word	0x40010000
 8004624:	40000400 	.word	0x40000400
 8004628:	40000800 	.word	0x40000800
 800462c:	40000c00 	.word	0x40000c00
 8004630:	40014000 	.word	0x40014000

08004634 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800463e:	2300      	movs	r3, #0
 8004640:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004648:	2b01      	cmp	r3, #1
 800464a:	d101      	bne.n	8004650 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800464c:	2302      	movs	r3, #2
 800464e:	e03d      	b.n	80046cc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	4313      	orrs	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4313      	orrs	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e03f      	b.n	800476a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d106      	bne.n	8004704 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7fd f89a 	bl	8001838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2224      	movs	r2, #36	; 0x24
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800471a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 f829 	bl	8004774 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	691a      	ldr	r2, [r3, #16]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004730:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	695a      	ldr	r2, [r3, #20]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004740:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004750:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2220      	movs	r2, #32
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2220      	movs	r2, #32
 8004764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
	...

08004774 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004778:	b0c0      	sub	sp, #256	; 0x100
 800477a:	af00      	add	r7, sp, #0
 800477c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800478c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004790:	68d9      	ldr	r1, [r3, #12]
 8004792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	ea40 0301 	orr.w	r3, r0, r1
 800479c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800479e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	431a      	orrs	r2, r3
 80047ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	431a      	orrs	r2, r3
 80047b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047cc:	f021 010c 	bic.w	r1, r1, #12
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047da:	430b      	orrs	r3, r1
 80047dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80047ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ee:	6999      	ldr	r1, [r3, #24]
 80047f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	ea40 0301 	orr.w	r3, r0, r1
 80047fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	4b8f      	ldr	r3, [pc, #572]	; (8004a40 <UART_SetConfig+0x2cc>)
 8004804:	429a      	cmp	r2, r3
 8004806:	d005      	beq.n	8004814 <UART_SetConfig+0xa0>
 8004808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	4b8d      	ldr	r3, [pc, #564]	; (8004a44 <UART_SetConfig+0x2d0>)
 8004810:	429a      	cmp	r2, r3
 8004812:	d104      	bne.n	800481e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004814:	f7fe fbde 	bl	8002fd4 <HAL_RCC_GetPCLK2Freq>
 8004818:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800481c:	e003      	b.n	8004826 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800481e:	f7fe fbc5 	bl	8002fac <HAL_RCC_GetPCLK1Freq>
 8004822:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482a:	69db      	ldr	r3, [r3, #28]
 800482c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004830:	f040 810c 	bne.w	8004a4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004834:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004838:	2200      	movs	r2, #0
 800483a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800483e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004842:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004846:	4622      	mov	r2, r4
 8004848:	462b      	mov	r3, r5
 800484a:	1891      	adds	r1, r2, r2
 800484c:	65b9      	str	r1, [r7, #88]	; 0x58
 800484e:	415b      	adcs	r3, r3
 8004850:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004852:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004856:	4621      	mov	r1, r4
 8004858:	eb12 0801 	adds.w	r8, r2, r1
 800485c:	4629      	mov	r1, r5
 800485e:	eb43 0901 	adc.w	r9, r3, r1
 8004862:	f04f 0200 	mov.w	r2, #0
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800486e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004872:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004876:	4690      	mov	r8, r2
 8004878:	4699      	mov	r9, r3
 800487a:	4623      	mov	r3, r4
 800487c:	eb18 0303 	adds.w	r3, r8, r3
 8004880:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004884:	462b      	mov	r3, r5
 8004886:	eb49 0303 	adc.w	r3, r9, r3
 800488a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800488e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800489a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800489e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80048a2:	460b      	mov	r3, r1
 80048a4:	18db      	adds	r3, r3, r3
 80048a6:	653b      	str	r3, [r7, #80]	; 0x50
 80048a8:	4613      	mov	r3, r2
 80048aa:	eb42 0303 	adc.w	r3, r2, r3
 80048ae:	657b      	str	r3, [r7, #84]	; 0x54
 80048b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80048b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80048b8:	f7fc f96a 	bl	8000b90 <__aeabi_uldivmod>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	4b61      	ldr	r3, [pc, #388]	; (8004a48 <UART_SetConfig+0x2d4>)
 80048c2:	fba3 2302 	umull	r2, r3, r3, r2
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	011c      	lsls	r4, r3, #4
 80048ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048ce:	2200      	movs	r2, #0
 80048d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80048d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80048dc:	4642      	mov	r2, r8
 80048de:	464b      	mov	r3, r9
 80048e0:	1891      	adds	r1, r2, r2
 80048e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80048e4:	415b      	adcs	r3, r3
 80048e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80048ec:	4641      	mov	r1, r8
 80048ee:	eb12 0a01 	adds.w	sl, r2, r1
 80048f2:	4649      	mov	r1, r9
 80048f4:	eb43 0b01 	adc.w	fp, r3, r1
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	f04f 0300 	mov.w	r3, #0
 8004900:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004904:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004908:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800490c:	4692      	mov	sl, r2
 800490e:	469b      	mov	fp, r3
 8004910:	4643      	mov	r3, r8
 8004912:	eb1a 0303 	adds.w	r3, sl, r3
 8004916:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800491a:	464b      	mov	r3, r9
 800491c:	eb4b 0303 	adc.w	r3, fp, r3
 8004920:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004930:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004934:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004938:	460b      	mov	r3, r1
 800493a:	18db      	adds	r3, r3, r3
 800493c:	643b      	str	r3, [r7, #64]	; 0x40
 800493e:	4613      	mov	r3, r2
 8004940:	eb42 0303 	adc.w	r3, r2, r3
 8004944:	647b      	str	r3, [r7, #68]	; 0x44
 8004946:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800494a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800494e:	f7fc f91f 	bl	8000b90 <__aeabi_uldivmod>
 8004952:	4602      	mov	r2, r0
 8004954:	460b      	mov	r3, r1
 8004956:	4611      	mov	r1, r2
 8004958:	4b3b      	ldr	r3, [pc, #236]	; (8004a48 <UART_SetConfig+0x2d4>)
 800495a:	fba3 2301 	umull	r2, r3, r3, r1
 800495e:	095b      	lsrs	r3, r3, #5
 8004960:	2264      	movs	r2, #100	; 0x64
 8004962:	fb02 f303 	mul.w	r3, r2, r3
 8004966:	1acb      	subs	r3, r1, r3
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800496e:	4b36      	ldr	r3, [pc, #216]	; (8004a48 <UART_SetConfig+0x2d4>)
 8004970:	fba3 2302 	umull	r2, r3, r3, r2
 8004974:	095b      	lsrs	r3, r3, #5
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800497c:	441c      	add	r4, r3
 800497e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004982:	2200      	movs	r2, #0
 8004984:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004988:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800498c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004990:	4642      	mov	r2, r8
 8004992:	464b      	mov	r3, r9
 8004994:	1891      	adds	r1, r2, r2
 8004996:	63b9      	str	r1, [r7, #56]	; 0x38
 8004998:	415b      	adcs	r3, r3
 800499a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800499c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049a0:	4641      	mov	r1, r8
 80049a2:	1851      	adds	r1, r2, r1
 80049a4:	6339      	str	r1, [r7, #48]	; 0x30
 80049a6:	4649      	mov	r1, r9
 80049a8:	414b      	adcs	r3, r1
 80049aa:	637b      	str	r3, [r7, #52]	; 0x34
 80049ac:	f04f 0200 	mov.w	r2, #0
 80049b0:	f04f 0300 	mov.w	r3, #0
 80049b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80049b8:	4659      	mov	r1, fp
 80049ba:	00cb      	lsls	r3, r1, #3
 80049bc:	4651      	mov	r1, sl
 80049be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049c2:	4651      	mov	r1, sl
 80049c4:	00ca      	lsls	r2, r1, #3
 80049c6:	4610      	mov	r0, r2
 80049c8:	4619      	mov	r1, r3
 80049ca:	4603      	mov	r3, r0
 80049cc:	4642      	mov	r2, r8
 80049ce:	189b      	adds	r3, r3, r2
 80049d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049d4:	464b      	mov	r3, r9
 80049d6:	460a      	mov	r2, r1
 80049d8:	eb42 0303 	adc.w	r3, r2, r3
 80049dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80049ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80049f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80049f4:	460b      	mov	r3, r1
 80049f6:	18db      	adds	r3, r3, r3
 80049f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80049fa:	4613      	mov	r3, r2
 80049fc:	eb42 0303 	adc.w	r3, r2, r3
 8004a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a0a:	f7fc f8c1 	bl	8000b90 <__aeabi_uldivmod>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	460b      	mov	r3, r1
 8004a12:	4b0d      	ldr	r3, [pc, #52]	; (8004a48 <UART_SetConfig+0x2d4>)
 8004a14:	fba3 1302 	umull	r1, r3, r3, r2
 8004a18:	095b      	lsrs	r3, r3, #5
 8004a1a:	2164      	movs	r1, #100	; 0x64
 8004a1c:	fb01 f303 	mul.w	r3, r1, r3
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	00db      	lsls	r3, r3, #3
 8004a24:	3332      	adds	r3, #50	; 0x32
 8004a26:	4a08      	ldr	r2, [pc, #32]	; (8004a48 <UART_SetConfig+0x2d4>)
 8004a28:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2c:	095b      	lsrs	r3, r3, #5
 8004a2e:	f003 0207 	and.w	r2, r3, #7
 8004a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4422      	add	r2, r4
 8004a3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a3c:	e105      	b.n	8004c4a <UART_SetConfig+0x4d6>
 8004a3e:	bf00      	nop
 8004a40:	40011000 	.word	0x40011000
 8004a44:	40011400 	.word	0x40011400
 8004a48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a50:	2200      	movs	r2, #0
 8004a52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a56:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a5e:	4642      	mov	r2, r8
 8004a60:	464b      	mov	r3, r9
 8004a62:	1891      	adds	r1, r2, r2
 8004a64:	6239      	str	r1, [r7, #32]
 8004a66:	415b      	adcs	r3, r3
 8004a68:	627b      	str	r3, [r7, #36]	; 0x24
 8004a6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a6e:	4641      	mov	r1, r8
 8004a70:	1854      	adds	r4, r2, r1
 8004a72:	4649      	mov	r1, r9
 8004a74:	eb43 0501 	adc.w	r5, r3, r1
 8004a78:	f04f 0200 	mov.w	r2, #0
 8004a7c:	f04f 0300 	mov.w	r3, #0
 8004a80:	00eb      	lsls	r3, r5, #3
 8004a82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a86:	00e2      	lsls	r2, r4, #3
 8004a88:	4614      	mov	r4, r2
 8004a8a:	461d      	mov	r5, r3
 8004a8c:	4643      	mov	r3, r8
 8004a8e:	18e3      	adds	r3, r4, r3
 8004a90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a94:	464b      	mov	r3, r9
 8004a96:	eb45 0303 	adc.w	r3, r5, r3
 8004a9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004aaa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	f04f 0300 	mov.w	r3, #0
 8004ab6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004aba:	4629      	mov	r1, r5
 8004abc:	008b      	lsls	r3, r1, #2
 8004abe:	4621      	mov	r1, r4
 8004ac0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ac4:	4621      	mov	r1, r4
 8004ac6:	008a      	lsls	r2, r1, #2
 8004ac8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004acc:	f7fc f860 	bl	8000b90 <__aeabi_uldivmod>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4b60      	ldr	r3, [pc, #384]	; (8004c58 <UART_SetConfig+0x4e4>)
 8004ad6:	fba3 2302 	umull	r2, r3, r3, r2
 8004ada:	095b      	lsrs	r3, r3, #5
 8004adc:	011c      	lsls	r4, r3, #4
 8004ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ae8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004aec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004af0:	4642      	mov	r2, r8
 8004af2:	464b      	mov	r3, r9
 8004af4:	1891      	adds	r1, r2, r2
 8004af6:	61b9      	str	r1, [r7, #24]
 8004af8:	415b      	adcs	r3, r3
 8004afa:	61fb      	str	r3, [r7, #28]
 8004afc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b00:	4641      	mov	r1, r8
 8004b02:	1851      	adds	r1, r2, r1
 8004b04:	6139      	str	r1, [r7, #16]
 8004b06:	4649      	mov	r1, r9
 8004b08:	414b      	adcs	r3, r1
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	f04f 0200 	mov.w	r2, #0
 8004b10:	f04f 0300 	mov.w	r3, #0
 8004b14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b18:	4659      	mov	r1, fp
 8004b1a:	00cb      	lsls	r3, r1, #3
 8004b1c:	4651      	mov	r1, sl
 8004b1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b22:	4651      	mov	r1, sl
 8004b24:	00ca      	lsls	r2, r1, #3
 8004b26:	4610      	mov	r0, r2
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	4642      	mov	r2, r8
 8004b2e:	189b      	adds	r3, r3, r2
 8004b30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b34:	464b      	mov	r3, r9
 8004b36:	460a      	mov	r2, r1
 8004b38:	eb42 0303 	adc.w	r3, r2, r3
 8004b3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	f04f 0300 	mov.w	r3, #0
 8004b54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b58:	4649      	mov	r1, r9
 8004b5a:	008b      	lsls	r3, r1, #2
 8004b5c:	4641      	mov	r1, r8
 8004b5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b62:	4641      	mov	r1, r8
 8004b64:	008a      	lsls	r2, r1, #2
 8004b66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b6a:	f7fc f811 	bl	8000b90 <__aeabi_uldivmod>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	4b39      	ldr	r3, [pc, #228]	; (8004c58 <UART_SetConfig+0x4e4>)
 8004b74:	fba3 1302 	umull	r1, r3, r3, r2
 8004b78:	095b      	lsrs	r3, r3, #5
 8004b7a:	2164      	movs	r1, #100	; 0x64
 8004b7c:	fb01 f303 	mul.w	r3, r1, r3
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	011b      	lsls	r3, r3, #4
 8004b84:	3332      	adds	r3, #50	; 0x32
 8004b86:	4a34      	ldr	r2, [pc, #208]	; (8004c58 <UART_SetConfig+0x4e4>)
 8004b88:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8c:	095b      	lsrs	r3, r3, #5
 8004b8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b92:	441c      	add	r4, r3
 8004b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b98:	2200      	movs	r2, #0
 8004b9a:	673b      	str	r3, [r7, #112]	; 0x70
 8004b9c:	677a      	str	r2, [r7, #116]	; 0x74
 8004b9e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ba2:	4642      	mov	r2, r8
 8004ba4:	464b      	mov	r3, r9
 8004ba6:	1891      	adds	r1, r2, r2
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	415b      	adcs	r3, r3
 8004bac:	60fb      	str	r3, [r7, #12]
 8004bae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bb2:	4641      	mov	r1, r8
 8004bb4:	1851      	adds	r1, r2, r1
 8004bb6:	6039      	str	r1, [r7, #0]
 8004bb8:	4649      	mov	r1, r9
 8004bba:	414b      	adcs	r3, r1
 8004bbc:	607b      	str	r3, [r7, #4]
 8004bbe:	f04f 0200 	mov.w	r2, #0
 8004bc2:	f04f 0300 	mov.w	r3, #0
 8004bc6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bca:	4659      	mov	r1, fp
 8004bcc:	00cb      	lsls	r3, r1, #3
 8004bce:	4651      	mov	r1, sl
 8004bd0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bd4:	4651      	mov	r1, sl
 8004bd6:	00ca      	lsls	r2, r1, #3
 8004bd8:	4610      	mov	r0, r2
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4603      	mov	r3, r0
 8004bde:	4642      	mov	r2, r8
 8004be0:	189b      	adds	r3, r3, r2
 8004be2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004be4:	464b      	mov	r3, r9
 8004be6:	460a      	mov	r2, r1
 8004be8:	eb42 0303 	adc.w	r3, r2, r3
 8004bec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	663b      	str	r3, [r7, #96]	; 0x60
 8004bf8:	667a      	str	r2, [r7, #100]	; 0x64
 8004bfa:	f04f 0200 	mov.w	r2, #0
 8004bfe:	f04f 0300 	mov.w	r3, #0
 8004c02:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c06:	4649      	mov	r1, r9
 8004c08:	008b      	lsls	r3, r1, #2
 8004c0a:	4641      	mov	r1, r8
 8004c0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c10:	4641      	mov	r1, r8
 8004c12:	008a      	lsls	r2, r1, #2
 8004c14:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c18:	f7fb ffba 	bl	8000b90 <__aeabi_uldivmod>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4b0d      	ldr	r3, [pc, #52]	; (8004c58 <UART_SetConfig+0x4e4>)
 8004c22:	fba3 1302 	umull	r1, r3, r3, r2
 8004c26:	095b      	lsrs	r3, r3, #5
 8004c28:	2164      	movs	r1, #100	; 0x64
 8004c2a:	fb01 f303 	mul.w	r3, r1, r3
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	011b      	lsls	r3, r3, #4
 8004c32:	3332      	adds	r3, #50	; 0x32
 8004c34:	4a08      	ldr	r2, [pc, #32]	; (8004c58 <UART_SetConfig+0x4e4>)
 8004c36:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3a:	095b      	lsrs	r3, r3, #5
 8004c3c:	f003 020f 	and.w	r2, r3, #15
 8004c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4422      	add	r2, r4
 8004c48:	609a      	str	r2, [r3, #8]
}
 8004c4a:	bf00      	nop
 8004c4c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c50:	46bd      	mov	sp, r7
 8004c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c56:	bf00      	nop
 8004c58:	51eb851f 	.word	0x51eb851f

08004c5c <__errno>:
 8004c5c:	4b01      	ldr	r3, [pc, #4]	; (8004c64 <__errno+0x8>)
 8004c5e:	6818      	ldr	r0, [r3, #0]
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	20000010 	.word	0x20000010

08004c68 <__libc_init_array>:
 8004c68:	b570      	push	{r4, r5, r6, lr}
 8004c6a:	4d0d      	ldr	r5, [pc, #52]	; (8004ca0 <__libc_init_array+0x38>)
 8004c6c:	4c0d      	ldr	r4, [pc, #52]	; (8004ca4 <__libc_init_array+0x3c>)
 8004c6e:	1b64      	subs	r4, r4, r5
 8004c70:	10a4      	asrs	r4, r4, #2
 8004c72:	2600      	movs	r6, #0
 8004c74:	42a6      	cmp	r6, r4
 8004c76:	d109      	bne.n	8004c8c <__libc_init_array+0x24>
 8004c78:	4d0b      	ldr	r5, [pc, #44]	; (8004ca8 <__libc_init_array+0x40>)
 8004c7a:	4c0c      	ldr	r4, [pc, #48]	; (8004cac <__libc_init_array+0x44>)
 8004c7c:	f000 ff3a 	bl	8005af4 <_init>
 8004c80:	1b64      	subs	r4, r4, r5
 8004c82:	10a4      	asrs	r4, r4, #2
 8004c84:	2600      	movs	r6, #0
 8004c86:	42a6      	cmp	r6, r4
 8004c88:	d105      	bne.n	8004c96 <__libc_init_array+0x2e>
 8004c8a:	bd70      	pop	{r4, r5, r6, pc}
 8004c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c90:	4798      	blx	r3
 8004c92:	3601      	adds	r6, #1
 8004c94:	e7ee      	b.n	8004c74 <__libc_init_array+0xc>
 8004c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c9a:	4798      	blx	r3
 8004c9c:	3601      	adds	r6, #1
 8004c9e:	e7f2      	b.n	8004c86 <__libc_init_array+0x1e>
 8004ca0:	08005b68 	.word	0x08005b68
 8004ca4:	08005b68 	.word	0x08005b68
 8004ca8:	08005b68 	.word	0x08005b68
 8004cac:	08005b6c 	.word	0x08005b6c

08004cb0 <memset>:
 8004cb0:	4402      	add	r2, r0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d100      	bne.n	8004cba <memset+0xa>
 8004cb8:	4770      	bx	lr
 8004cba:	f803 1b01 	strb.w	r1, [r3], #1
 8004cbe:	e7f9      	b.n	8004cb4 <memset+0x4>

08004cc0 <pow>:
 8004cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc2:	ed2d 8b02 	vpush	{d8}
 8004cc6:	eeb0 8a40 	vmov.f32	s16, s0
 8004cca:	eef0 8a60 	vmov.f32	s17, s1
 8004cce:	ec55 4b11 	vmov	r4, r5, d1
 8004cd2:	f000 f865 	bl	8004da0 <__ieee754_pow>
 8004cd6:	4622      	mov	r2, r4
 8004cd8:	462b      	mov	r3, r5
 8004cda:	4620      	mov	r0, r4
 8004cdc:	4629      	mov	r1, r5
 8004cde:	ec57 6b10 	vmov	r6, r7, d0
 8004ce2:	f7fb fecf 	bl	8000a84 <__aeabi_dcmpun>
 8004ce6:	2800      	cmp	r0, #0
 8004ce8:	d13b      	bne.n	8004d62 <pow+0xa2>
 8004cea:	ec51 0b18 	vmov	r0, r1, d8
 8004cee:	2200      	movs	r2, #0
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	f7fb fe95 	bl	8000a20 <__aeabi_dcmpeq>
 8004cf6:	b1b8      	cbz	r0, 8004d28 <pow+0x68>
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	4629      	mov	r1, r5
 8004d00:	f7fb fe8e 	bl	8000a20 <__aeabi_dcmpeq>
 8004d04:	2800      	cmp	r0, #0
 8004d06:	d146      	bne.n	8004d96 <pow+0xd6>
 8004d08:	ec45 4b10 	vmov	d0, r4, r5
 8004d0c:	f000 fe61 	bl	80059d2 <finite>
 8004d10:	b338      	cbz	r0, 8004d62 <pow+0xa2>
 8004d12:	2200      	movs	r2, #0
 8004d14:	2300      	movs	r3, #0
 8004d16:	4620      	mov	r0, r4
 8004d18:	4629      	mov	r1, r5
 8004d1a:	f7fb fe8b 	bl	8000a34 <__aeabi_dcmplt>
 8004d1e:	b300      	cbz	r0, 8004d62 <pow+0xa2>
 8004d20:	f7ff ff9c 	bl	8004c5c <__errno>
 8004d24:	2322      	movs	r3, #34	; 0x22
 8004d26:	e01b      	b.n	8004d60 <pow+0xa0>
 8004d28:	ec47 6b10 	vmov	d0, r6, r7
 8004d2c:	f000 fe51 	bl	80059d2 <finite>
 8004d30:	b9e0      	cbnz	r0, 8004d6c <pow+0xac>
 8004d32:	eeb0 0a48 	vmov.f32	s0, s16
 8004d36:	eef0 0a68 	vmov.f32	s1, s17
 8004d3a:	f000 fe4a 	bl	80059d2 <finite>
 8004d3e:	b1a8      	cbz	r0, 8004d6c <pow+0xac>
 8004d40:	ec45 4b10 	vmov	d0, r4, r5
 8004d44:	f000 fe45 	bl	80059d2 <finite>
 8004d48:	b180      	cbz	r0, 8004d6c <pow+0xac>
 8004d4a:	4632      	mov	r2, r6
 8004d4c:	463b      	mov	r3, r7
 8004d4e:	4630      	mov	r0, r6
 8004d50:	4639      	mov	r1, r7
 8004d52:	f7fb fe97 	bl	8000a84 <__aeabi_dcmpun>
 8004d56:	2800      	cmp	r0, #0
 8004d58:	d0e2      	beq.n	8004d20 <pow+0x60>
 8004d5a:	f7ff ff7f 	bl	8004c5c <__errno>
 8004d5e:	2321      	movs	r3, #33	; 0x21
 8004d60:	6003      	str	r3, [r0, #0]
 8004d62:	ecbd 8b02 	vpop	{d8}
 8004d66:	ec47 6b10 	vmov	d0, r6, r7
 8004d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	2300      	movs	r3, #0
 8004d70:	4630      	mov	r0, r6
 8004d72:	4639      	mov	r1, r7
 8004d74:	f7fb fe54 	bl	8000a20 <__aeabi_dcmpeq>
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	d0f2      	beq.n	8004d62 <pow+0xa2>
 8004d7c:	eeb0 0a48 	vmov.f32	s0, s16
 8004d80:	eef0 0a68 	vmov.f32	s1, s17
 8004d84:	f000 fe25 	bl	80059d2 <finite>
 8004d88:	2800      	cmp	r0, #0
 8004d8a:	d0ea      	beq.n	8004d62 <pow+0xa2>
 8004d8c:	ec45 4b10 	vmov	d0, r4, r5
 8004d90:	f000 fe1f 	bl	80059d2 <finite>
 8004d94:	e7c3      	b.n	8004d1e <pow+0x5e>
 8004d96:	4f01      	ldr	r7, [pc, #4]	; (8004d9c <pow+0xdc>)
 8004d98:	2600      	movs	r6, #0
 8004d9a:	e7e2      	b.n	8004d62 <pow+0xa2>
 8004d9c:	3ff00000 	.word	0x3ff00000

08004da0 <__ieee754_pow>:
 8004da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da4:	ed2d 8b06 	vpush	{d8-d10}
 8004da8:	b089      	sub	sp, #36	; 0x24
 8004daa:	ed8d 1b00 	vstr	d1, [sp]
 8004dae:	e9dd 2900 	ldrd	r2, r9, [sp]
 8004db2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8004db6:	ea58 0102 	orrs.w	r1, r8, r2
 8004dba:	ec57 6b10 	vmov	r6, r7, d0
 8004dbe:	d115      	bne.n	8004dec <__ieee754_pow+0x4c>
 8004dc0:	19b3      	adds	r3, r6, r6
 8004dc2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8004dc6:	4152      	adcs	r2, r2
 8004dc8:	4299      	cmp	r1, r3
 8004dca:	4b89      	ldr	r3, [pc, #548]	; (8004ff0 <__ieee754_pow+0x250>)
 8004dcc:	4193      	sbcs	r3, r2
 8004dce:	f080 84d2 	bcs.w	8005776 <__ieee754_pow+0x9d6>
 8004dd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004dd6:	4630      	mov	r0, r6
 8004dd8:	4639      	mov	r1, r7
 8004dda:	f7fb fa03 	bl	80001e4 <__adddf3>
 8004dde:	ec41 0b10 	vmov	d0, r0, r1
 8004de2:	b009      	add	sp, #36	; 0x24
 8004de4:	ecbd 8b06 	vpop	{d8-d10}
 8004de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dec:	4b81      	ldr	r3, [pc, #516]	; (8004ff4 <__ieee754_pow+0x254>)
 8004dee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8004df2:	429c      	cmp	r4, r3
 8004df4:	ee10 aa10 	vmov	sl, s0
 8004df8:	463d      	mov	r5, r7
 8004dfa:	dc06      	bgt.n	8004e0a <__ieee754_pow+0x6a>
 8004dfc:	d101      	bne.n	8004e02 <__ieee754_pow+0x62>
 8004dfe:	2e00      	cmp	r6, #0
 8004e00:	d1e7      	bne.n	8004dd2 <__ieee754_pow+0x32>
 8004e02:	4598      	cmp	r8, r3
 8004e04:	dc01      	bgt.n	8004e0a <__ieee754_pow+0x6a>
 8004e06:	d10f      	bne.n	8004e28 <__ieee754_pow+0x88>
 8004e08:	b172      	cbz	r2, 8004e28 <__ieee754_pow+0x88>
 8004e0a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004e0e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004e12:	ea55 050a 	orrs.w	r5, r5, sl
 8004e16:	d1dc      	bne.n	8004dd2 <__ieee754_pow+0x32>
 8004e18:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004e1c:	18db      	adds	r3, r3, r3
 8004e1e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004e22:	4152      	adcs	r2, r2
 8004e24:	429d      	cmp	r5, r3
 8004e26:	e7d0      	b.n	8004dca <__ieee754_pow+0x2a>
 8004e28:	2d00      	cmp	r5, #0
 8004e2a:	da3b      	bge.n	8004ea4 <__ieee754_pow+0x104>
 8004e2c:	4b72      	ldr	r3, [pc, #456]	; (8004ff8 <__ieee754_pow+0x258>)
 8004e2e:	4598      	cmp	r8, r3
 8004e30:	dc51      	bgt.n	8004ed6 <__ieee754_pow+0x136>
 8004e32:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004e36:	4598      	cmp	r8, r3
 8004e38:	f340 84ac 	ble.w	8005794 <__ieee754_pow+0x9f4>
 8004e3c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004e40:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004e44:	2b14      	cmp	r3, #20
 8004e46:	dd0f      	ble.n	8004e68 <__ieee754_pow+0xc8>
 8004e48:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004e4c:	fa22 f103 	lsr.w	r1, r2, r3
 8004e50:	fa01 f303 	lsl.w	r3, r1, r3
 8004e54:	4293      	cmp	r3, r2
 8004e56:	f040 849d 	bne.w	8005794 <__ieee754_pow+0x9f4>
 8004e5a:	f001 0101 	and.w	r1, r1, #1
 8004e5e:	f1c1 0302 	rsb	r3, r1, #2
 8004e62:	9304      	str	r3, [sp, #16]
 8004e64:	b182      	cbz	r2, 8004e88 <__ieee754_pow+0xe8>
 8004e66:	e05f      	b.n	8004f28 <__ieee754_pow+0x188>
 8004e68:	2a00      	cmp	r2, #0
 8004e6a:	d15b      	bne.n	8004f24 <__ieee754_pow+0x184>
 8004e6c:	f1c3 0314 	rsb	r3, r3, #20
 8004e70:	fa48 f103 	asr.w	r1, r8, r3
 8004e74:	fa01 f303 	lsl.w	r3, r1, r3
 8004e78:	4543      	cmp	r3, r8
 8004e7a:	f040 8488 	bne.w	800578e <__ieee754_pow+0x9ee>
 8004e7e:	f001 0101 	and.w	r1, r1, #1
 8004e82:	f1c1 0302 	rsb	r3, r1, #2
 8004e86:	9304      	str	r3, [sp, #16]
 8004e88:	4b5c      	ldr	r3, [pc, #368]	; (8004ffc <__ieee754_pow+0x25c>)
 8004e8a:	4598      	cmp	r8, r3
 8004e8c:	d132      	bne.n	8004ef4 <__ieee754_pow+0x154>
 8004e8e:	f1b9 0f00 	cmp.w	r9, #0
 8004e92:	f280 8478 	bge.w	8005786 <__ieee754_pow+0x9e6>
 8004e96:	4959      	ldr	r1, [pc, #356]	; (8004ffc <__ieee754_pow+0x25c>)
 8004e98:	4632      	mov	r2, r6
 8004e9a:	463b      	mov	r3, r7
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	f7fb fc81 	bl	80007a4 <__aeabi_ddiv>
 8004ea2:	e79c      	b.n	8004dde <__ieee754_pow+0x3e>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	9304      	str	r3, [sp, #16]
 8004ea8:	2a00      	cmp	r2, #0
 8004eaa:	d13d      	bne.n	8004f28 <__ieee754_pow+0x188>
 8004eac:	4b51      	ldr	r3, [pc, #324]	; (8004ff4 <__ieee754_pow+0x254>)
 8004eae:	4598      	cmp	r8, r3
 8004eb0:	d1ea      	bne.n	8004e88 <__ieee754_pow+0xe8>
 8004eb2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004eb6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004eba:	ea53 030a 	orrs.w	r3, r3, sl
 8004ebe:	f000 845a 	beq.w	8005776 <__ieee754_pow+0x9d6>
 8004ec2:	4b4f      	ldr	r3, [pc, #316]	; (8005000 <__ieee754_pow+0x260>)
 8004ec4:	429c      	cmp	r4, r3
 8004ec6:	dd08      	ble.n	8004eda <__ieee754_pow+0x13a>
 8004ec8:	f1b9 0f00 	cmp.w	r9, #0
 8004ecc:	f2c0 8457 	blt.w	800577e <__ieee754_pow+0x9de>
 8004ed0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ed4:	e783      	b.n	8004dde <__ieee754_pow+0x3e>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e7e5      	b.n	8004ea6 <__ieee754_pow+0x106>
 8004eda:	f1b9 0f00 	cmp.w	r9, #0
 8004ede:	f04f 0000 	mov.w	r0, #0
 8004ee2:	f04f 0100 	mov.w	r1, #0
 8004ee6:	f6bf af7a 	bge.w	8004dde <__ieee754_pow+0x3e>
 8004eea:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004eee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004ef2:	e774      	b.n	8004dde <__ieee754_pow+0x3e>
 8004ef4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8004ef8:	d106      	bne.n	8004f08 <__ieee754_pow+0x168>
 8004efa:	4632      	mov	r2, r6
 8004efc:	463b      	mov	r3, r7
 8004efe:	4630      	mov	r0, r6
 8004f00:	4639      	mov	r1, r7
 8004f02:	f7fb fb25 	bl	8000550 <__aeabi_dmul>
 8004f06:	e76a      	b.n	8004dde <__ieee754_pow+0x3e>
 8004f08:	4b3e      	ldr	r3, [pc, #248]	; (8005004 <__ieee754_pow+0x264>)
 8004f0a:	4599      	cmp	r9, r3
 8004f0c:	d10c      	bne.n	8004f28 <__ieee754_pow+0x188>
 8004f0e:	2d00      	cmp	r5, #0
 8004f10:	db0a      	blt.n	8004f28 <__ieee754_pow+0x188>
 8004f12:	ec47 6b10 	vmov	d0, r6, r7
 8004f16:	b009      	add	sp, #36	; 0x24
 8004f18:	ecbd 8b06 	vpop	{d8-d10}
 8004f1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f20:	f000 bc6c 	b.w	80057fc <__ieee754_sqrt>
 8004f24:	2300      	movs	r3, #0
 8004f26:	9304      	str	r3, [sp, #16]
 8004f28:	ec47 6b10 	vmov	d0, r6, r7
 8004f2c:	f000 fd48 	bl	80059c0 <fabs>
 8004f30:	ec51 0b10 	vmov	r0, r1, d0
 8004f34:	f1ba 0f00 	cmp.w	sl, #0
 8004f38:	d129      	bne.n	8004f8e <__ieee754_pow+0x1ee>
 8004f3a:	b124      	cbz	r4, 8004f46 <__ieee754_pow+0x1a6>
 8004f3c:	4b2f      	ldr	r3, [pc, #188]	; (8004ffc <__ieee754_pow+0x25c>)
 8004f3e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d123      	bne.n	8004f8e <__ieee754_pow+0x1ee>
 8004f46:	f1b9 0f00 	cmp.w	r9, #0
 8004f4a:	da05      	bge.n	8004f58 <__ieee754_pow+0x1b8>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	2000      	movs	r0, #0
 8004f52:	492a      	ldr	r1, [pc, #168]	; (8004ffc <__ieee754_pow+0x25c>)
 8004f54:	f7fb fc26 	bl	80007a4 <__aeabi_ddiv>
 8004f58:	2d00      	cmp	r5, #0
 8004f5a:	f6bf af40 	bge.w	8004dde <__ieee754_pow+0x3e>
 8004f5e:	9b04      	ldr	r3, [sp, #16]
 8004f60:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004f64:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004f68:	4323      	orrs	r3, r4
 8004f6a:	d108      	bne.n	8004f7e <__ieee754_pow+0x1de>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4610      	mov	r0, r2
 8004f72:	4619      	mov	r1, r3
 8004f74:	f7fb f934 	bl	80001e0 <__aeabi_dsub>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	e78f      	b.n	8004e9e <__ieee754_pow+0xfe>
 8004f7e:	9b04      	ldr	r3, [sp, #16]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	f47f af2c 	bne.w	8004dde <__ieee754_pow+0x3e>
 8004f86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	e727      	b.n	8004dde <__ieee754_pow+0x3e>
 8004f8e:	0feb      	lsrs	r3, r5, #31
 8004f90:	3b01      	subs	r3, #1
 8004f92:	9306      	str	r3, [sp, #24]
 8004f94:	9a06      	ldr	r2, [sp, #24]
 8004f96:	9b04      	ldr	r3, [sp, #16]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	d102      	bne.n	8004fa2 <__ieee754_pow+0x202>
 8004f9c:	4632      	mov	r2, r6
 8004f9e:	463b      	mov	r3, r7
 8004fa0:	e7e6      	b.n	8004f70 <__ieee754_pow+0x1d0>
 8004fa2:	4b19      	ldr	r3, [pc, #100]	; (8005008 <__ieee754_pow+0x268>)
 8004fa4:	4598      	cmp	r8, r3
 8004fa6:	f340 80fb 	ble.w	80051a0 <__ieee754_pow+0x400>
 8004faa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004fae:	4598      	cmp	r8, r3
 8004fb0:	4b13      	ldr	r3, [pc, #76]	; (8005000 <__ieee754_pow+0x260>)
 8004fb2:	dd0c      	ble.n	8004fce <__ieee754_pow+0x22e>
 8004fb4:	429c      	cmp	r4, r3
 8004fb6:	dc0f      	bgt.n	8004fd8 <__ieee754_pow+0x238>
 8004fb8:	f1b9 0f00 	cmp.w	r9, #0
 8004fbc:	da0f      	bge.n	8004fde <__ieee754_pow+0x23e>
 8004fbe:	2000      	movs	r0, #0
 8004fc0:	b009      	add	sp, #36	; 0x24
 8004fc2:	ecbd 8b06 	vpop	{d8-d10}
 8004fc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fca:	f000 bcf0 	b.w	80059ae <__math_oflow>
 8004fce:	429c      	cmp	r4, r3
 8004fd0:	dbf2      	blt.n	8004fb8 <__ieee754_pow+0x218>
 8004fd2:	4b0a      	ldr	r3, [pc, #40]	; (8004ffc <__ieee754_pow+0x25c>)
 8004fd4:	429c      	cmp	r4, r3
 8004fd6:	dd19      	ble.n	800500c <__ieee754_pow+0x26c>
 8004fd8:	f1b9 0f00 	cmp.w	r9, #0
 8004fdc:	dcef      	bgt.n	8004fbe <__ieee754_pow+0x21e>
 8004fde:	2000      	movs	r0, #0
 8004fe0:	b009      	add	sp, #36	; 0x24
 8004fe2:	ecbd 8b06 	vpop	{d8-d10}
 8004fe6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fea:	f000 bcd7 	b.w	800599c <__math_uflow>
 8004fee:	bf00      	nop
 8004ff0:	fff00000 	.word	0xfff00000
 8004ff4:	7ff00000 	.word	0x7ff00000
 8004ff8:	433fffff 	.word	0x433fffff
 8004ffc:	3ff00000 	.word	0x3ff00000
 8005000:	3fefffff 	.word	0x3fefffff
 8005004:	3fe00000 	.word	0x3fe00000
 8005008:	41e00000 	.word	0x41e00000
 800500c:	4b60      	ldr	r3, [pc, #384]	; (8005190 <__ieee754_pow+0x3f0>)
 800500e:	2200      	movs	r2, #0
 8005010:	f7fb f8e6 	bl	80001e0 <__aeabi_dsub>
 8005014:	a354      	add	r3, pc, #336	; (adr r3, 8005168 <__ieee754_pow+0x3c8>)
 8005016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501a:	4604      	mov	r4, r0
 800501c:	460d      	mov	r5, r1
 800501e:	f7fb fa97 	bl	8000550 <__aeabi_dmul>
 8005022:	a353      	add	r3, pc, #332	; (adr r3, 8005170 <__ieee754_pow+0x3d0>)
 8005024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005028:	4606      	mov	r6, r0
 800502a:	460f      	mov	r7, r1
 800502c:	4620      	mov	r0, r4
 800502e:	4629      	mov	r1, r5
 8005030:	f7fb fa8e 	bl	8000550 <__aeabi_dmul>
 8005034:	4b57      	ldr	r3, [pc, #348]	; (8005194 <__ieee754_pow+0x3f4>)
 8005036:	4682      	mov	sl, r0
 8005038:	468b      	mov	fp, r1
 800503a:	2200      	movs	r2, #0
 800503c:	4620      	mov	r0, r4
 800503e:	4629      	mov	r1, r5
 8005040:	f7fb fa86 	bl	8000550 <__aeabi_dmul>
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	a14b      	add	r1, pc, #300	; (adr r1, 8005178 <__ieee754_pow+0x3d8>)
 800504a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800504e:	f7fb f8c7 	bl	80001e0 <__aeabi_dsub>
 8005052:	4622      	mov	r2, r4
 8005054:	462b      	mov	r3, r5
 8005056:	f7fb fa7b 	bl	8000550 <__aeabi_dmul>
 800505a:	4602      	mov	r2, r0
 800505c:	460b      	mov	r3, r1
 800505e:	2000      	movs	r0, #0
 8005060:	494d      	ldr	r1, [pc, #308]	; (8005198 <__ieee754_pow+0x3f8>)
 8005062:	f7fb f8bd 	bl	80001e0 <__aeabi_dsub>
 8005066:	4622      	mov	r2, r4
 8005068:	4680      	mov	r8, r0
 800506a:	4689      	mov	r9, r1
 800506c:	462b      	mov	r3, r5
 800506e:	4620      	mov	r0, r4
 8005070:	4629      	mov	r1, r5
 8005072:	f7fb fa6d 	bl	8000550 <__aeabi_dmul>
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	4640      	mov	r0, r8
 800507c:	4649      	mov	r1, r9
 800507e:	f7fb fa67 	bl	8000550 <__aeabi_dmul>
 8005082:	a33f      	add	r3, pc, #252	; (adr r3, 8005180 <__ieee754_pow+0x3e0>)
 8005084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005088:	f7fb fa62 	bl	8000550 <__aeabi_dmul>
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	4650      	mov	r0, sl
 8005092:	4659      	mov	r1, fp
 8005094:	f7fb f8a4 	bl	80001e0 <__aeabi_dsub>
 8005098:	4602      	mov	r2, r0
 800509a:	460b      	mov	r3, r1
 800509c:	4680      	mov	r8, r0
 800509e:	4689      	mov	r9, r1
 80050a0:	4630      	mov	r0, r6
 80050a2:	4639      	mov	r1, r7
 80050a4:	f7fb f89e 	bl	80001e4 <__adddf3>
 80050a8:	2000      	movs	r0, #0
 80050aa:	4632      	mov	r2, r6
 80050ac:	463b      	mov	r3, r7
 80050ae:	4604      	mov	r4, r0
 80050b0:	460d      	mov	r5, r1
 80050b2:	f7fb f895 	bl	80001e0 <__aeabi_dsub>
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	4640      	mov	r0, r8
 80050bc:	4649      	mov	r1, r9
 80050be:	f7fb f88f 	bl	80001e0 <__aeabi_dsub>
 80050c2:	9b04      	ldr	r3, [sp, #16]
 80050c4:	9a06      	ldr	r2, [sp, #24]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	4313      	orrs	r3, r2
 80050ca:	4682      	mov	sl, r0
 80050cc:	468b      	mov	fp, r1
 80050ce:	f040 81e7 	bne.w	80054a0 <__ieee754_pow+0x700>
 80050d2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8005188 <__ieee754_pow+0x3e8>
 80050d6:	eeb0 8a47 	vmov.f32	s16, s14
 80050da:	eef0 8a67 	vmov.f32	s17, s15
 80050de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80050e2:	2600      	movs	r6, #0
 80050e4:	4632      	mov	r2, r6
 80050e6:	463b      	mov	r3, r7
 80050e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050ec:	f7fb f878 	bl	80001e0 <__aeabi_dsub>
 80050f0:	4622      	mov	r2, r4
 80050f2:	462b      	mov	r3, r5
 80050f4:	f7fb fa2c 	bl	8000550 <__aeabi_dmul>
 80050f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050fc:	4680      	mov	r8, r0
 80050fe:	4689      	mov	r9, r1
 8005100:	4650      	mov	r0, sl
 8005102:	4659      	mov	r1, fp
 8005104:	f7fb fa24 	bl	8000550 <__aeabi_dmul>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	4640      	mov	r0, r8
 800510e:	4649      	mov	r1, r9
 8005110:	f7fb f868 	bl	80001e4 <__adddf3>
 8005114:	4632      	mov	r2, r6
 8005116:	463b      	mov	r3, r7
 8005118:	4680      	mov	r8, r0
 800511a:	4689      	mov	r9, r1
 800511c:	4620      	mov	r0, r4
 800511e:	4629      	mov	r1, r5
 8005120:	f7fb fa16 	bl	8000550 <__aeabi_dmul>
 8005124:	460b      	mov	r3, r1
 8005126:	4604      	mov	r4, r0
 8005128:	460d      	mov	r5, r1
 800512a:	4602      	mov	r2, r0
 800512c:	4649      	mov	r1, r9
 800512e:	4640      	mov	r0, r8
 8005130:	f7fb f858 	bl	80001e4 <__adddf3>
 8005134:	4b19      	ldr	r3, [pc, #100]	; (800519c <__ieee754_pow+0x3fc>)
 8005136:	4299      	cmp	r1, r3
 8005138:	ec45 4b19 	vmov	d9, r4, r5
 800513c:	4606      	mov	r6, r0
 800513e:	460f      	mov	r7, r1
 8005140:	468b      	mov	fp, r1
 8005142:	f340 82f1 	ble.w	8005728 <__ieee754_pow+0x988>
 8005146:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800514a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800514e:	4303      	orrs	r3, r0
 8005150:	f000 81e4 	beq.w	800551c <__ieee754_pow+0x77c>
 8005154:	ec51 0b18 	vmov	r0, r1, d8
 8005158:	2200      	movs	r2, #0
 800515a:	2300      	movs	r3, #0
 800515c:	f7fb fc6a 	bl	8000a34 <__aeabi_dcmplt>
 8005160:	3800      	subs	r0, #0
 8005162:	bf18      	it	ne
 8005164:	2001      	movne	r0, #1
 8005166:	e72b      	b.n	8004fc0 <__ieee754_pow+0x220>
 8005168:	60000000 	.word	0x60000000
 800516c:	3ff71547 	.word	0x3ff71547
 8005170:	f85ddf44 	.word	0xf85ddf44
 8005174:	3e54ae0b 	.word	0x3e54ae0b
 8005178:	55555555 	.word	0x55555555
 800517c:	3fd55555 	.word	0x3fd55555
 8005180:	652b82fe 	.word	0x652b82fe
 8005184:	3ff71547 	.word	0x3ff71547
 8005188:	00000000 	.word	0x00000000
 800518c:	bff00000 	.word	0xbff00000
 8005190:	3ff00000 	.word	0x3ff00000
 8005194:	3fd00000 	.word	0x3fd00000
 8005198:	3fe00000 	.word	0x3fe00000
 800519c:	408fffff 	.word	0x408fffff
 80051a0:	4bd5      	ldr	r3, [pc, #852]	; (80054f8 <__ieee754_pow+0x758>)
 80051a2:	402b      	ands	r3, r5
 80051a4:	2200      	movs	r2, #0
 80051a6:	b92b      	cbnz	r3, 80051b4 <__ieee754_pow+0x414>
 80051a8:	4bd4      	ldr	r3, [pc, #848]	; (80054fc <__ieee754_pow+0x75c>)
 80051aa:	f7fb f9d1 	bl	8000550 <__aeabi_dmul>
 80051ae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80051b2:	460c      	mov	r4, r1
 80051b4:	1523      	asrs	r3, r4, #20
 80051b6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80051ba:	4413      	add	r3, r2
 80051bc:	9305      	str	r3, [sp, #20]
 80051be:	4bd0      	ldr	r3, [pc, #832]	; (8005500 <__ieee754_pow+0x760>)
 80051c0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80051c4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80051c8:	429c      	cmp	r4, r3
 80051ca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80051ce:	dd08      	ble.n	80051e2 <__ieee754_pow+0x442>
 80051d0:	4bcc      	ldr	r3, [pc, #816]	; (8005504 <__ieee754_pow+0x764>)
 80051d2:	429c      	cmp	r4, r3
 80051d4:	f340 8162 	ble.w	800549c <__ieee754_pow+0x6fc>
 80051d8:	9b05      	ldr	r3, [sp, #20]
 80051da:	3301      	adds	r3, #1
 80051dc:	9305      	str	r3, [sp, #20]
 80051de:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80051e2:	2400      	movs	r4, #0
 80051e4:	00e3      	lsls	r3, r4, #3
 80051e6:	9307      	str	r3, [sp, #28]
 80051e8:	4bc7      	ldr	r3, [pc, #796]	; (8005508 <__ieee754_pow+0x768>)
 80051ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80051ee:	ed93 7b00 	vldr	d7, [r3]
 80051f2:	4629      	mov	r1, r5
 80051f4:	ec53 2b17 	vmov	r2, r3, d7
 80051f8:	eeb0 9a47 	vmov.f32	s18, s14
 80051fc:	eef0 9a67 	vmov.f32	s19, s15
 8005200:	4682      	mov	sl, r0
 8005202:	f7fa ffed 	bl	80001e0 <__aeabi_dsub>
 8005206:	4652      	mov	r2, sl
 8005208:	4606      	mov	r6, r0
 800520a:	460f      	mov	r7, r1
 800520c:	462b      	mov	r3, r5
 800520e:	ec51 0b19 	vmov	r0, r1, d9
 8005212:	f7fa ffe7 	bl	80001e4 <__adddf3>
 8005216:	4602      	mov	r2, r0
 8005218:	460b      	mov	r3, r1
 800521a:	2000      	movs	r0, #0
 800521c:	49bb      	ldr	r1, [pc, #748]	; (800550c <__ieee754_pow+0x76c>)
 800521e:	f7fb fac1 	bl	80007a4 <__aeabi_ddiv>
 8005222:	ec41 0b1a 	vmov	d10, r0, r1
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	4630      	mov	r0, r6
 800522c:	4639      	mov	r1, r7
 800522e:	f7fb f98f 	bl	8000550 <__aeabi_dmul>
 8005232:	2300      	movs	r3, #0
 8005234:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005238:	9302      	str	r3, [sp, #8]
 800523a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800523e:	46ab      	mov	fp, r5
 8005240:	106d      	asrs	r5, r5, #1
 8005242:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005246:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800524a:	ec41 0b18 	vmov	d8, r0, r1
 800524e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8005252:	2200      	movs	r2, #0
 8005254:	4640      	mov	r0, r8
 8005256:	4649      	mov	r1, r9
 8005258:	4614      	mov	r4, r2
 800525a:	461d      	mov	r5, r3
 800525c:	f7fb f978 	bl	8000550 <__aeabi_dmul>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4630      	mov	r0, r6
 8005266:	4639      	mov	r1, r7
 8005268:	f7fa ffba 	bl	80001e0 <__aeabi_dsub>
 800526c:	ec53 2b19 	vmov	r2, r3, d9
 8005270:	4606      	mov	r6, r0
 8005272:	460f      	mov	r7, r1
 8005274:	4620      	mov	r0, r4
 8005276:	4629      	mov	r1, r5
 8005278:	f7fa ffb2 	bl	80001e0 <__aeabi_dsub>
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	4650      	mov	r0, sl
 8005282:	4659      	mov	r1, fp
 8005284:	f7fa ffac 	bl	80001e0 <__aeabi_dsub>
 8005288:	4642      	mov	r2, r8
 800528a:	464b      	mov	r3, r9
 800528c:	f7fb f960 	bl	8000550 <__aeabi_dmul>
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	4630      	mov	r0, r6
 8005296:	4639      	mov	r1, r7
 8005298:	f7fa ffa2 	bl	80001e0 <__aeabi_dsub>
 800529c:	ec53 2b1a 	vmov	r2, r3, d10
 80052a0:	f7fb f956 	bl	8000550 <__aeabi_dmul>
 80052a4:	ec53 2b18 	vmov	r2, r3, d8
 80052a8:	ec41 0b19 	vmov	d9, r0, r1
 80052ac:	ec51 0b18 	vmov	r0, r1, d8
 80052b0:	f7fb f94e 	bl	8000550 <__aeabi_dmul>
 80052b4:	a37c      	add	r3, pc, #496	; (adr r3, 80054a8 <__ieee754_pow+0x708>)
 80052b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ba:	4604      	mov	r4, r0
 80052bc:	460d      	mov	r5, r1
 80052be:	f7fb f947 	bl	8000550 <__aeabi_dmul>
 80052c2:	a37b      	add	r3, pc, #492	; (adr r3, 80054b0 <__ieee754_pow+0x710>)
 80052c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c8:	f7fa ff8c 	bl	80001e4 <__adddf3>
 80052cc:	4622      	mov	r2, r4
 80052ce:	462b      	mov	r3, r5
 80052d0:	f7fb f93e 	bl	8000550 <__aeabi_dmul>
 80052d4:	a378      	add	r3, pc, #480	; (adr r3, 80054b8 <__ieee754_pow+0x718>)
 80052d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052da:	f7fa ff83 	bl	80001e4 <__adddf3>
 80052de:	4622      	mov	r2, r4
 80052e0:	462b      	mov	r3, r5
 80052e2:	f7fb f935 	bl	8000550 <__aeabi_dmul>
 80052e6:	a376      	add	r3, pc, #472	; (adr r3, 80054c0 <__ieee754_pow+0x720>)
 80052e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ec:	f7fa ff7a 	bl	80001e4 <__adddf3>
 80052f0:	4622      	mov	r2, r4
 80052f2:	462b      	mov	r3, r5
 80052f4:	f7fb f92c 	bl	8000550 <__aeabi_dmul>
 80052f8:	a373      	add	r3, pc, #460	; (adr r3, 80054c8 <__ieee754_pow+0x728>)
 80052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fe:	f7fa ff71 	bl	80001e4 <__adddf3>
 8005302:	4622      	mov	r2, r4
 8005304:	462b      	mov	r3, r5
 8005306:	f7fb f923 	bl	8000550 <__aeabi_dmul>
 800530a:	a371      	add	r3, pc, #452	; (adr r3, 80054d0 <__ieee754_pow+0x730>)
 800530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005310:	f7fa ff68 	bl	80001e4 <__adddf3>
 8005314:	4622      	mov	r2, r4
 8005316:	4606      	mov	r6, r0
 8005318:	460f      	mov	r7, r1
 800531a:	462b      	mov	r3, r5
 800531c:	4620      	mov	r0, r4
 800531e:	4629      	mov	r1, r5
 8005320:	f7fb f916 	bl	8000550 <__aeabi_dmul>
 8005324:	4602      	mov	r2, r0
 8005326:	460b      	mov	r3, r1
 8005328:	4630      	mov	r0, r6
 800532a:	4639      	mov	r1, r7
 800532c:	f7fb f910 	bl	8000550 <__aeabi_dmul>
 8005330:	4642      	mov	r2, r8
 8005332:	4604      	mov	r4, r0
 8005334:	460d      	mov	r5, r1
 8005336:	464b      	mov	r3, r9
 8005338:	ec51 0b18 	vmov	r0, r1, d8
 800533c:	f7fa ff52 	bl	80001e4 <__adddf3>
 8005340:	ec53 2b19 	vmov	r2, r3, d9
 8005344:	f7fb f904 	bl	8000550 <__aeabi_dmul>
 8005348:	4622      	mov	r2, r4
 800534a:	462b      	mov	r3, r5
 800534c:	f7fa ff4a 	bl	80001e4 <__adddf3>
 8005350:	4642      	mov	r2, r8
 8005352:	4682      	mov	sl, r0
 8005354:	468b      	mov	fp, r1
 8005356:	464b      	mov	r3, r9
 8005358:	4640      	mov	r0, r8
 800535a:	4649      	mov	r1, r9
 800535c:	f7fb f8f8 	bl	8000550 <__aeabi_dmul>
 8005360:	4b6b      	ldr	r3, [pc, #428]	; (8005510 <__ieee754_pow+0x770>)
 8005362:	2200      	movs	r2, #0
 8005364:	4606      	mov	r6, r0
 8005366:	460f      	mov	r7, r1
 8005368:	f7fa ff3c 	bl	80001e4 <__adddf3>
 800536c:	4652      	mov	r2, sl
 800536e:	465b      	mov	r3, fp
 8005370:	f7fa ff38 	bl	80001e4 <__adddf3>
 8005374:	2000      	movs	r0, #0
 8005376:	4604      	mov	r4, r0
 8005378:	460d      	mov	r5, r1
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	4640      	mov	r0, r8
 8005380:	4649      	mov	r1, r9
 8005382:	f7fb f8e5 	bl	8000550 <__aeabi_dmul>
 8005386:	4b62      	ldr	r3, [pc, #392]	; (8005510 <__ieee754_pow+0x770>)
 8005388:	4680      	mov	r8, r0
 800538a:	4689      	mov	r9, r1
 800538c:	2200      	movs	r2, #0
 800538e:	4620      	mov	r0, r4
 8005390:	4629      	mov	r1, r5
 8005392:	f7fa ff25 	bl	80001e0 <__aeabi_dsub>
 8005396:	4632      	mov	r2, r6
 8005398:	463b      	mov	r3, r7
 800539a:	f7fa ff21 	bl	80001e0 <__aeabi_dsub>
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	4650      	mov	r0, sl
 80053a4:	4659      	mov	r1, fp
 80053a6:	f7fa ff1b 	bl	80001e0 <__aeabi_dsub>
 80053aa:	ec53 2b18 	vmov	r2, r3, d8
 80053ae:	f7fb f8cf 	bl	8000550 <__aeabi_dmul>
 80053b2:	4622      	mov	r2, r4
 80053b4:	4606      	mov	r6, r0
 80053b6:	460f      	mov	r7, r1
 80053b8:	462b      	mov	r3, r5
 80053ba:	ec51 0b19 	vmov	r0, r1, d9
 80053be:	f7fb f8c7 	bl	8000550 <__aeabi_dmul>
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	4630      	mov	r0, r6
 80053c8:	4639      	mov	r1, r7
 80053ca:	f7fa ff0b 	bl	80001e4 <__adddf3>
 80053ce:	4606      	mov	r6, r0
 80053d0:	460f      	mov	r7, r1
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	4640      	mov	r0, r8
 80053d8:	4649      	mov	r1, r9
 80053da:	f7fa ff03 	bl	80001e4 <__adddf3>
 80053de:	a33e      	add	r3, pc, #248	; (adr r3, 80054d8 <__ieee754_pow+0x738>)
 80053e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e4:	2000      	movs	r0, #0
 80053e6:	4604      	mov	r4, r0
 80053e8:	460d      	mov	r5, r1
 80053ea:	f7fb f8b1 	bl	8000550 <__aeabi_dmul>
 80053ee:	4642      	mov	r2, r8
 80053f0:	ec41 0b18 	vmov	d8, r0, r1
 80053f4:	464b      	mov	r3, r9
 80053f6:	4620      	mov	r0, r4
 80053f8:	4629      	mov	r1, r5
 80053fa:	f7fa fef1 	bl	80001e0 <__aeabi_dsub>
 80053fe:	4602      	mov	r2, r0
 8005400:	460b      	mov	r3, r1
 8005402:	4630      	mov	r0, r6
 8005404:	4639      	mov	r1, r7
 8005406:	f7fa feeb 	bl	80001e0 <__aeabi_dsub>
 800540a:	a335      	add	r3, pc, #212	; (adr r3, 80054e0 <__ieee754_pow+0x740>)
 800540c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005410:	f7fb f89e 	bl	8000550 <__aeabi_dmul>
 8005414:	a334      	add	r3, pc, #208	; (adr r3, 80054e8 <__ieee754_pow+0x748>)
 8005416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541a:	4606      	mov	r6, r0
 800541c:	460f      	mov	r7, r1
 800541e:	4620      	mov	r0, r4
 8005420:	4629      	mov	r1, r5
 8005422:	f7fb f895 	bl	8000550 <__aeabi_dmul>
 8005426:	4602      	mov	r2, r0
 8005428:	460b      	mov	r3, r1
 800542a:	4630      	mov	r0, r6
 800542c:	4639      	mov	r1, r7
 800542e:	f7fa fed9 	bl	80001e4 <__adddf3>
 8005432:	9a07      	ldr	r2, [sp, #28]
 8005434:	4b37      	ldr	r3, [pc, #220]	; (8005514 <__ieee754_pow+0x774>)
 8005436:	4413      	add	r3, r2
 8005438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543c:	f7fa fed2 	bl	80001e4 <__adddf3>
 8005440:	4682      	mov	sl, r0
 8005442:	9805      	ldr	r0, [sp, #20]
 8005444:	468b      	mov	fp, r1
 8005446:	f7fb f819 	bl	800047c <__aeabi_i2d>
 800544a:	9a07      	ldr	r2, [sp, #28]
 800544c:	4b32      	ldr	r3, [pc, #200]	; (8005518 <__ieee754_pow+0x778>)
 800544e:	4413      	add	r3, r2
 8005450:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005454:	4606      	mov	r6, r0
 8005456:	460f      	mov	r7, r1
 8005458:	4652      	mov	r2, sl
 800545a:	465b      	mov	r3, fp
 800545c:	ec51 0b18 	vmov	r0, r1, d8
 8005460:	f7fa fec0 	bl	80001e4 <__adddf3>
 8005464:	4642      	mov	r2, r8
 8005466:	464b      	mov	r3, r9
 8005468:	f7fa febc 	bl	80001e4 <__adddf3>
 800546c:	4632      	mov	r2, r6
 800546e:	463b      	mov	r3, r7
 8005470:	f7fa feb8 	bl	80001e4 <__adddf3>
 8005474:	2000      	movs	r0, #0
 8005476:	4632      	mov	r2, r6
 8005478:	463b      	mov	r3, r7
 800547a:	4604      	mov	r4, r0
 800547c:	460d      	mov	r5, r1
 800547e:	f7fa feaf 	bl	80001e0 <__aeabi_dsub>
 8005482:	4642      	mov	r2, r8
 8005484:	464b      	mov	r3, r9
 8005486:	f7fa feab 	bl	80001e0 <__aeabi_dsub>
 800548a:	ec53 2b18 	vmov	r2, r3, d8
 800548e:	f7fa fea7 	bl	80001e0 <__aeabi_dsub>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	4650      	mov	r0, sl
 8005498:	4659      	mov	r1, fp
 800549a:	e610      	b.n	80050be <__ieee754_pow+0x31e>
 800549c:	2401      	movs	r4, #1
 800549e:	e6a1      	b.n	80051e4 <__ieee754_pow+0x444>
 80054a0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80054f0 <__ieee754_pow+0x750>
 80054a4:	e617      	b.n	80050d6 <__ieee754_pow+0x336>
 80054a6:	bf00      	nop
 80054a8:	4a454eef 	.word	0x4a454eef
 80054ac:	3fca7e28 	.word	0x3fca7e28
 80054b0:	93c9db65 	.word	0x93c9db65
 80054b4:	3fcd864a 	.word	0x3fcd864a
 80054b8:	a91d4101 	.word	0xa91d4101
 80054bc:	3fd17460 	.word	0x3fd17460
 80054c0:	518f264d 	.word	0x518f264d
 80054c4:	3fd55555 	.word	0x3fd55555
 80054c8:	db6fabff 	.word	0xdb6fabff
 80054cc:	3fdb6db6 	.word	0x3fdb6db6
 80054d0:	33333303 	.word	0x33333303
 80054d4:	3fe33333 	.word	0x3fe33333
 80054d8:	e0000000 	.word	0xe0000000
 80054dc:	3feec709 	.word	0x3feec709
 80054e0:	dc3a03fd 	.word	0xdc3a03fd
 80054e4:	3feec709 	.word	0x3feec709
 80054e8:	145b01f5 	.word	0x145b01f5
 80054ec:	be3e2fe0 	.word	0xbe3e2fe0
 80054f0:	00000000 	.word	0x00000000
 80054f4:	3ff00000 	.word	0x3ff00000
 80054f8:	7ff00000 	.word	0x7ff00000
 80054fc:	43400000 	.word	0x43400000
 8005500:	0003988e 	.word	0x0003988e
 8005504:	000bb679 	.word	0x000bb679
 8005508:	08005b30 	.word	0x08005b30
 800550c:	3ff00000 	.word	0x3ff00000
 8005510:	40080000 	.word	0x40080000
 8005514:	08005b50 	.word	0x08005b50
 8005518:	08005b40 	.word	0x08005b40
 800551c:	a3b5      	add	r3, pc, #724	; (adr r3, 80057f4 <__ieee754_pow+0xa54>)
 800551e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005522:	4640      	mov	r0, r8
 8005524:	4649      	mov	r1, r9
 8005526:	f7fa fe5d 	bl	80001e4 <__adddf3>
 800552a:	4622      	mov	r2, r4
 800552c:	ec41 0b1a 	vmov	d10, r0, r1
 8005530:	462b      	mov	r3, r5
 8005532:	4630      	mov	r0, r6
 8005534:	4639      	mov	r1, r7
 8005536:	f7fa fe53 	bl	80001e0 <__aeabi_dsub>
 800553a:	4602      	mov	r2, r0
 800553c:	460b      	mov	r3, r1
 800553e:	ec51 0b1a 	vmov	r0, r1, d10
 8005542:	f7fb fa95 	bl	8000a70 <__aeabi_dcmpgt>
 8005546:	2800      	cmp	r0, #0
 8005548:	f47f ae04 	bne.w	8005154 <__ieee754_pow+0x3b4>
 800554c:	4aa4      	ldr	r2, [pc, #656]	; (80057e0 <__ieee754_pow+0xa40>)
 800554e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005552:	4293      	cmp	r3, r2
 8005554:	f340 8108 	ble.w	8005768 <__ieee754_pow+0x9c8>
 8005558:	151b      	asrs	r3, r3, #20
 800555a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800555e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005562:	fa4a f303 	asr.w	r3, sl, r3
 8005566:	445b      	add	r3, fp
 8005568:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800556c:	4e9d      	ldr	r6, [pc, #628]	; (80057e4 <__ieee754_pow+0xa44>)
 800556e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005572:	4116      	asrs	r6, r2
 8005574:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005578:	2000      	movs	r0, #0
 800557a:	ea23 0106 	bic.w	r1, r3, r6
 800557e:	f1c2 0214 	rsb	r2, r2, #20
 8005582:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005586:	fa4a fa02 	asr.w	sl, sl, r2
 800558a:	f1bb 0f00 	cmp.w	fp, #0
 800558e:	4602      	mov	r2, r0
 8005590:	460b      	mov	r3, r1
 8005592:	4620      	mov	r0, r4
 8005594:	4629      	mov	r1, r5
 8005596:	bfb8      	it	lt
 8005598:	f1ca 0a00 	rsblt	sl, sl, #0
 800559c:	f7fa fe20 	bl	80001e0 <__aeabi_dsub>
 80055a0:	ec41 0b19 	vmov	d9, r0, r1
 80055a4:	4642      	mov	r2, r8
 80055a6:	464b      	mov	r3, r9
 80055a8:	ec51 0b19 	vmov	r0, r1, d9
 80055ac:	f7fa fe1a 	bl	80001e4 <__adddf3>
 80055b0:	a37b      	add	r3, pc, #492	; (adr r3, 80057a0 <__ieee754_pow+0xa00>)
 80055b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b6:	2000      	movs	r0, #0
 80055b8:	4604      	mov	r4, r0
 80055ba:	460d      	mov	r5, r1
 80055bc:	f7fa ffc8 	bl	8000550 <__aeabi_dmul>
 80055c0:	ec53 2b19 	vmov	r2, r3, d9
 80055c4:	4606      	mov	r6, r0
 80055c6:	460f      	mov	r7, r1
 80055c8:	4620      	mov	r0, r4
 80055ca:	4629      	mov	r1, r5
 80055cc:	f7fa fe08 	bl	80001e0 <__aeabi_dsub>
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	4640      	mov	r0, r8
 80055d6:	4649      	mov	r1, r9
 80055d8:	f7fa fe02 	bl	80001e0 <__aeabi_dsub>
 80055dc:	a372      	add	r3, pc, #456	; (adr r3, 80057a8 <__ieee754_pow+0xa08>)
 80055de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e2:	f7fa ffb5 	bl	8000550 <__aeabi_dmul>
 80055e6:	a372      	add	r3, pc, #456	; (adr r3, 80057b0 <__ieee754_pow+0xa10>)
 80055e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ec:	4680      	mov	r8, r0
 80055ee:	4689      	mov	r9, r1
 80055f0:	4620      	mov	r0, r4
 80055f2:	4629      	mov	r1, r5
 80055f4:	f7fa ffac 	bl	8000550 <__aeabi_dmul>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	4640      	mov	r0, r8
 80055fe:	4649      	mov	r1, r9
 8005600:	f7fa fdf0 	bl	80001e4 <__adddf3>
 8005604:	4604      	mov	r4, r0
 8005606:	460d      	mov	r5, r1
 8005608:	4602      	mov	r2, r0
 800560a:	460b      	mov	r3, r1
 800560c:	4630      	mov	r0, r6
 800560e:	4639      	mov	r1, r7
 8005610:	f7fa fde8 	bl	80001e4 <__adddf3>
 8005614:	4632      	mov	r2, r6
 8005616:	463b      	mov	r3, r7
 8005618:	4680      	mov	r8, r0
 800561a:	4689      	mov	r9, r1
 800561c:	f7fa fde0 	bl	80001e0 <__aeabi_dsub>
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	4620      	mov	r0, r4
 8005626:	4629      	mov	r1, r5
 8005628:	f7fa fdda 	bl	80001e0 <__aeabi_dsub>
 800562c:	4642      	mov	r2, r8
 800562e:	4606      	mov	r6, r0
 8005630:	460f      	mov	r7, r1
 8005632:	464b      	mov	r3, r9
 8005634:	4640      	mov	r0, r8
 8005636:	4649      	mov	r1, r9
 8005638:	f7fa ff8a 	bl	8000550 <__aeabi_dmul>
 800563c:	a35e      	add	r3, pc, #376	; (adr r3, 80057b8 <__ieee754_pow+0xa18>)
 800563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005642:	4604      	mov	r4, r0
 8005644:	460d      	mov	r5, r1
 8005646:	f7fa ff83 	bl	8000550 <__aeabi_dmul>
 800564a:	a35d      	add	r3, pc, #372	; (adr r3, 80057c0 <__ieee754_pow+0xa20>)
 800564c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005650:	f7fa fdc6 	bl	80001e0 <__aeabi_dsub>
 8005654:	4622      	mov	r2, r4
 8005656:	462b      	mov	r3, r5
 8005658:	f7fa ff7a 	bl	8000550 <__aeabi_dmul>
 800565c:	a35a      	add	r3, pc, #360	; (adr r3, 80057c8 <__ieee754_pow+0xa28>)
 800565e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005662:	f7fa fdbf 	bl	80001e4 <__adddf3>
 8005666:	4622      	mov	r2, r4
 8005668:	462b      	mov	r3, r5
 800566a:	f7fa ff71 	bl	8000550 <__aeabi_dmul>
 800566e:	a358      	add	r3, pc, #352	; (adr r3, 80057d0 <__ieee754_pow+0xa30>)
 8005670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005674:	f7fa fdb4 	bl	80001e0 <__aeabi_dsub>
 8005678:	4622      	mov	r2, r4
 800567a:	462b      	mov	r3, r5
 800567c:	f7fa ff68 	bl	8000550 <__aeabi_dmul>
 8005680:	a355      	add	r3, pc, #340	; (adr r3, 80057d8 <__ieee754_pow+0xa38>)
 8005682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005686:	f7fa fdad 	bl	80001e4 <__adddf3>
 800568a:	4622      	mov	r2, r4
 800568c:	462b      	mov	r3, r5
 800568e:	f7fa ff5f 	bl	8000550 <__aeabi_dmul>
 8005692:	4602      	mov	r2, r0
 8005694:	460b      	mov	r3, r1
 8005696:	4640      	mov	r0, r8
 8005698:	4649      	mov	r1, r9
 800569a:	f7fa fda1 	bl	80001e0 <__aeabi_dsub>
 800569e:	4604      	mov	r4, r0
 80056a0:	460d      	mov	r5, r1
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	4640      	mov	r0, r8
 80056a8:	4649      	mov	r1, r9
 80056aa:	f7fa ff51 	bl	8000550 <__aeabi_dmul>
 80056ae:	2200      	movs	r2, #0
 80056b0:	ec41 0b19 	vmov	d9, r0, r1
 80056b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056b8:	4620      	mov	r0, r4
 80056ba:	4629      	mov	r1, r5
 80056bc:	f7fa fd90 	bl	80001e0 <__aeabi_dsub>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	ec51 0b19 	vmov	r0, r1, d9
 80056c8:	f7fb f86c 	bl	80007a4 <__aeabi_ddiv>
 80056cc:	4632      	mov	r2, r6
 80056ce:	4604      	mov	r4, r0
 80056d0:	460d      	mov	r5, r1
 80056d2:	463b      	mov	r3, r7
 80056d4:	4640      	mov	r0, r8
 80056d6:	4649      	mov	r1, r9
 80056d8:	f7fa ff3a 	bl	8000550 <__aeabi_dmul>
 80056dc:	4632      	mov	r2, r6
 80056de:	463b      	mov	r3, r7
 80056e0:	f7fa fd80 	bl	80001e4 <__adddf3>
 80056e4:	4602      	mov	r2, r0
 80056e6:	460b      	mov	r3, r1
 80056e8:	4620      	mov	r0, r4
 80056ea:	4629      	mov	r1, r5
 80056ec:	f7fa fd78 	bl	80001e0 <__aeabi_dsub>
 80056f0:	4642      	mov	r2, r8
 80056f2:	464b      	mov	r3, r9
 80056f4:	f7fa fd74 	bl	80001e0 <__aeabi_dsub>
 80056f8:	460b      	mov	r3, r1
 80056fa:	4602      	mov	r2, r0
 80056fc:	493a      	ldr	r1, [pc, #232]	; (80057e8 <__ieee754_pow+0xa48>)
 80056fe:	2000      	movs	r0, #0
 8005700:	f7fa fd6e 	bl	80001e0 <__aeabi_dsub>
 8005704:	ec41 0b10 	vmov	d0, r0, r1
 8005708:	ee10 3a90 	vmov	r3, s1
 800570c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005710:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005714:	da2b      	bge.n	800576e <__ieee754_pow+0x9ce>
 8005716:	4650      	mov	r0, sl
 8005718:	f000 f966 	bl	80059e8 <scalbn>
 800571c:	ec51 0b10 	vmov	r0, r1, d0
 8005720:	ec53 2b18 	vmov	r2, r3, d8
 8005724:	f7ff bbed 	b.w	8004f02 <__ieee754_pow+0x162>
 8005728:	4b30      	ldr	r3, [pc, #192]	; (80057ec <__ieee754_pow+0xa4c>)
 800572a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800572e:	429e      	cmp	r6, r3
 8005730:	f77f af0c 	ble.w	800554c <__ieee754_pow+0x7ac>
 8005734:	4b2e      	ldr	r3, [pc, #184]	; (80057f0 <__ieee754_pow+0xa50>)
 8005736:	440b      	add	r3, r1
 8005738:	4303      	orrs	r3, r0
 800573a:	d009      	beq.n	8005750 <__ieee754_pow+0x9b0>
 800573c:	ec51 0b18 	vmov	r0, r1, d8
 8005740:	2200      	movs	r2, #0
 8005742:	2300      	movs	r3, #0
 8005744:	f7fb f976 	bl	8000a34 <__aeabi_dcmplt>
 8005748:	3800      	subs	r0, #0
 800574a:	bf18      	it	ne
 800574c:	2001      	movne	r0, #1
 800574e:	e447      	b.n	8004fe0 <__ieee754_pow+0x240>
 8005750:	4622      	mov	r2, r4
 8005752:	462b      	mov	r3, r5
 8005754:	f7fa fd44 	bl	80001e0 <__aeabi_dsub>
 8005758:	4642      	mov	r2, r8
 800575a:	464b      	mov	r3, r9
 800575c:	f7fb f97e 	bl	8000a5c <__aeabi_dcmpge>
 8005760:	2800      	cmp	r0, #0
 8005762:	f43f aef3 	beq.w	800554c <__ieee754_pow+0x7ac>
 8005766:	e7e9      	b.n	800573c <__ieee754_pow+0x99c>
 8005768:	f04f 0a00 	mov.w	sl, #0
 800576c:	e71a      	b.n	80055a4 <__ieee754_pow+0x804>
 800576e:	ec51 0b10 	vmov	r0, r1, d0
 8005772:	4619      	mov	r1, r3
 8005774:	e7d4      	b.n	8005720 <__ieee754_pow+0x980>
 8005776:	491c      	ldr	r1, [pc, #112]	; (80057e8 <__ieee754_pow+0xa48>)
 8005778:	2000      	movs	r0, #0
 800577a:	f7ff bb30 	b.w	8004dde <__ieee754_pow+0x3e>
 800577e:	2000      	movs	r0, #0
 8005780:	2100      	movs	r1, #0
 8005782:	f7ff bb2c 	b.w	8004dde <__ieee754_pow+0x3e>
 8005786:	4630      	mov	r0, r6
 8005788:	4639      	mov	r1, r7
 800578a:	f7ff bb28 	b.w	8004dde <__ieee754_pow+0x3e>
 800578e:	9204      	str	r2, [sp, #16]
 8005790:	f7ff bb7a 	b.w	8004e88 <__ieee754_pow+0xe8>
 8005794:	2300      	movs	r3, #0
 8005796:	f7ff bb64 	b.w	8004e62 <__ieee754_pow+0xc2>
 800579a:	bf00      	nop
 800579c:	f3af 8000 	nop.w
 80057a0:	00000000 	.word	0x00000000
 80057a4:	3fe62e43 	.word	0x3fe62e43
 80057a8:	fefa39ef 	.word	0xfefa39ef
 80057ac:	3fe62e42 	.word	0x3fe62e42
 80057b0:	0ca86c39 	.word	0x0ca86c39
 80057b4:	be205c61 	.word	0xbe205c61
 80057b8:	72bea4d0 	.word	0x72bea4d0
 80057bc:	3e663769 	.word	0x3e663769
 80057c0:	c5d26bf1 	.word	0xc5d26bf1
 80057c4:	3ebbbd41 	.word	0x3ebbbd41
 80057c8:	af25de2c 	.word	0xaf25de2c
 80057cc:	3f11566a 	.word	0x3f11566a
 80057d0:	16bebd93 	.word	0x16bebd93
 80057d4:	3f66c16c 	.word	0x3f66c16c
 80057d8:	5555553e 	.word	0x5555553e
 80057dc:	3fc55555 	.word	0x3fc55555
 80057e0:	3fe00000 	.word	0x3fe00000
 80057e4:	000fffff 	.word	0x000fffff
 80057e8:	3ff00000 	.word	0x3ff00000
 80057ec:	4090cbff 	.word	0x4090cbff
 80057f0:	3f6f3400 	.word	0x3f6f3400
 80057f4:	652b82fe 	.word	0x652b82fe
 80057f8:	3c971547 	.word	0x3c971547

080057fc <__ieee754_sqrt>:
 80057fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005800:	ec55 4b10 	vmov	r4, r5, d0
 8005804:	4e55      	ldr	r6, [pc, #340]	; (800595c <__ieee754_sqrt+0x160>)
 8005806:	43ae      	bics	r6, r5
 8005808:	ee10 0a10 	vmov	r0, s0
 800580c:	ee10 3a10 	vmov	r3, s0
 8005810:	462a      	mov	r2, r5
 8005812:	4629      	mov	r1, r5
 8005814:	d110      	bne.n	8005838 <__ieee754_sqrt+0x3c>
 8005816:	ee10 2a10 	vmov	r2, s0
 800581a:	462b      	mov	r3, r5
 800581c:	f7fa fe98 	bl	8000550 <__aeabi_dmul>
 8005820:	4602      	mov	r2, r0
 8005822:	460b      	mov	r3, r1
 8005824:	4620      	mov	r0, r4
 8005826:	4629      	mov	r1, r5
 8005828:	f7fa fcdc 	bl	80001e4 <__adddf3>
 800582c:	4604      	mov	r4, r0
 800582e:	460d      	mov	r5, r1
 8005830:	ec45 4b10 	vmov	d0, r4, r5
 8005834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005838:	2d00      	cmp	r5, #0
 800583a:	dc10      	bgt.n	800585e <__ieee754_sqrt+0x62>
 800583c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005840:	4330      	orrs	r0, r6
 8005842:	d0f5      	beq.n	8005830 <__ieee754_sqrt+0x34>
 8005844:	b15d      	cbz	r5, 800585e <__ieee754_sqrt+0x62>
 8005846:	ee10 2a10 	vmov	r2, s0
 800584a:	462b      	mov	r3, r5
 800584c:	ee10 0a10 	vmov	r0, s0
 8005850:	f7fa fcc6 	bl	80001e0 <__aeabi_dsub>
 8005854:	4602      	mov	r2, r0
 8005856:	460b      	mov	r3, r1
 8005858:	f7fa ffa4 	bl	80007a4 <__aeabi_ddiv>
 800585c:	e7e6      	b.n	800582c <__ieee754_sqrt+0x30>
 800585e:	1512      	asrs	r2, r2, #20
 8005860:	d074      	beq.n	800594c <__ieee754_sqrt+0x150>
 8005862:	07d4      	lsls	r4, r2, #31
 8005864:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005868:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800586c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005870:	bf5e      	ittt	pl
 8005872:	0fda      	lsrpl	r2, r3, #31
 8005874:	005b      	lslpl	r3, r3, #1
 8005876:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800587a:	2400      	movs	r4, #0
 800587c:	0fda      	lsrs	r2, r3, #31
 800587e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005882:	107f      	asrs	r7, r7, #1
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	2516      	movs	r5, #22
 8005888:	4620      	mov	r0, r4
 800588a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800588e:	1886      	adds	r6, r0, r2
 8005890:	428e      	cmp	r6, r1
 8005892:	bfde      	ittt	le
 8005894:	1b89      	suble	r1, r1, r6
 8005896:	18b0      	addle	r0, r6, r2
 8005898:	18a4      	addle	r4, r4, r2
 800589a:	0049      	lsls	r1, r1, #1
 800589c:	3d01      	subs	r5, #1
 800589e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80058a2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80058a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80058aa:	d1f0      	bne.n	800588e <__ieee754_sqrt+0x92>
 80058ac:	462a      	mov	r2, r5
 80058ae:	f04f 0e20 	mov.w	lr, #32
 80058b2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80058b6:	4281      	cmp	r1, r0
 80058b8:	eb06 0c05 	add.w	ip, r6, r5
 80058bc:	dc02      	bgt.n	80058c4 <__ieee754_sqrt+0xc8>
 80058be:	d113      	bne.n	80058e8 <__ieee754_sqrt+0xec>
 80058c0:	459c      	cmp	ip, r3
 80058c2:	d811      	bhi.n	80058e8 <__ieee754_sqrt+0xec>
 80058c4:	f1bc 0f00 	cmp.w	ip, #0
 80058c8:	eb0c 0506 	add.w	r5, ip, r6
 80058cc:	da43      	bge.n	8005956 <__ieee754_sqrt+0x15a>
 80058ce:	2d00      	cmp	r5, #0
 80058d0:	db41      	blt.n	8005956 <__ieee754_sqrt+0x15a>
 80058d2:	f100 0801 	add.w	r8, r0, #1
 80058d6:	1a09      	subs	r1, r1, r0
 80058d8:	459c      	cmp	ip, r3
 80058da:	bf88      	it	hi
 80058dc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80058e0:	eba3 030c 	sub.w	r3, r3, ip
 80058e4:	4432      	add	r2, r6
 80058e6:	4640      	mov	r0, r8
 80058e8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80058ec:	f1be 0e01 	subs.w	lr, lr, #1
 80058f0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80058f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80058f8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80058fc:	d1db      	bne.n	80058b6 <__ieee754_sqrt+0xba>
 80058fe:	430b      	orrs	r3, r1
 8005900:	d006      	beq.n	8005910 <__ieee754_sqrt+0x114>
 8005902:	1c50      	adds	r0, r2, #1
 8005904:	bf13      	iteet	ne
 8005906:	3201      	addne	r2, #1
 8005908:	3401      	addeq	r4, #1
 800590a:	4672      	moveq	r2, lr
 800590c:	f022 0201 	bicne.w	r2, r2, #1
 8005910:	1063      	asrs	r3, r4, #1
 8005912:	0852      	lsrs	r2, r2, #1
 8005914:	07e1      	lsls	r1, r4, #31
 8005916:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800591a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800591e:	bf48      	it	mi
 8005920:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005924:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005928:	4614      	mov	r4, r2
 800592a:	e781      	b.n	8005830 <__ieee754_sqrt+0x34>
 800592c:	0ad9      	lsrs	r1, r3, #11
 800592e:	3815      	subs	r0, #21
 8005930:	055b      	lsls	r3, r3, #21
 8005932:	2900      	cmp	r1, #0
 8005934:	d0fa      	beq.n	800592c <__ieee754_sqrt+0x130>
 8005936:	02cd      	lsls	r5, r1, #11
 8005938:	d50a      	bpl.n	8005950 <__ieee754_sqrt+0x154>
 800593a:	f1c2 0420 	rsb	r4, r2, #32
 800593e:	fa23 f404 	lsr.w	r4, r3, r4
 8005942:	1e55      	subs	r5, r2, #1
 8005944:	4093      	lsls	r3, r2
 8005946:	4321      	orrs	r1, r4
 8005948:	1b42      	subs	r2, r0, r5
 800594a:	e78a      	b.n	8005862 <__ieee754_sqrt+0x66>
 800594c:	4610      	mov	r0, r2
 800594e:	e7f0      	b.n	8005932 <__ieee754_sqrt+0x136>
 8005950:	0049      	lsls	r1, r1, #1
 8005952:	3201      	adds	r2, #1
 8005954:	e7ef      	b.n	8005936 <__ieee754_sqrt+0x13a>
 8005956:	4680      	mov	r8, r0
 8005958:	e7bd      	b.n	80058d6 <__ieee754_sqrt+0xda>
 800595a:	bf00      	nop
 800595c:	7ff00000 	.word	0x7ff00000

08005960 <with_errno>:
 8005960:	b570      	push	{r4, r5, r6, lr}
 8005962:	4604      	mov	r4, r0
 8005964:	460d      	mov	r5, r1
 8005966:	4616      	mov	r6, r2
 8005968:	f7ff f978 	bl	8004c5c <__errno>
 800596c:	4629      	mov	r1, r5
 800596e:	6006      	str	r6, [r0, #0]
 8005970:	4620      	mov	r0, r4
 8005972:	bd70      	pop	{r4, r5, r6, pc}

08005974 <xflow>:
 8005974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005976:	4614      	mov	r4, r2
 8005978:	461d      	mov	r5, r3
 800597a:	b108      	cbz	r0, 8005980 <xflow+0xc>
 800597c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005980:	e9cd 2300 	strd	r2, r3, [sp]
 8005984:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005988:	4620      	mov	r0, r4
 800598a:	4629      	mov	r1, r5
 800598c:	f7fa fde0 	bl	8000550 <__aeabi_dmul>
 8005990:	2222      	movs	r2, #34	; 0x22
 8005992:	b003      	add	sp, #12
 8005994:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005998:	f7ff bfe2 	b.w	8005960 <with_errno>

0800599c <__math_uflow>:
 800599c:	b508      	push	{r3, lr}
 800599e:	2200      	movs	r2, #0
 80059a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80059a4:	f7ff ffe6 	bl	8005974 <xflow>
 80059a8:	ec41 0b10 	vmov	d0, r0, r1
 80059ac:	bd08      	pop	{r3, pc}

080059ae <__math_oflow>:
 80059ae:	b508      	push	{r3, lr}
 80059b0:	2200      	movs	r2, #0
 80059b2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80059b6:	f7ff ffdd 	bl	8005974 <xflow>
 80059ba:	ec41 0b10 	vmov	d0, r0, r1
 80059be:	bd08      	pop	{r3, pc}

080059c0 <fabs>:
 80059c0:	ec51 0b10 	vmov	r0, r1, d0
 80059c4:	ee10 2a10 	vmov	r2, s0
 80059c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80059cc:	ec43 2b10 	vmov	d0, r2, r3
 80059d0:	4770      	bx	lr

080059d2 <finite>:
 80059d2:	b082      	sub	sp, #8
 80059d4:	ed8d 0b00 	vstr	d0, [sp]
 80059d8:	9801      	ldr	r0, [sp, #4]
 80059da:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80059de:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80059e2:	0fc0      	lsrs	r0, r0, #31
 80059e4:	b002      	add	sp, #8
 80059e6:	4770      	bx	lr

080059e8 <scalbn>:
 80059e8:	b570      	push	{r4, r5, r6, lr}
 80059ea:	ec55 4b10 	vmov	r4, r5, d0
 80059ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80059f2:	4606      	mov	r6, r0
 80059f4:	462b      	mov	r3, r5
 80059f6:	b99a      	cbnz	r2, 8005a20 <scalbn+0x38>
 80059f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80059fc:	4323      	orrs	r3, r4
 80059fe:	d036      	beq.n	8005a6e <scalbn+0x86>
 8005a00:	4b39      	ldr	r3, [pc, #228]	; (8005ae8 <scalbn+0x100>)
 8005a02:	4629      	mov	r1, r5
 8005a04:	ee10 0a10 	vmov	r0, s0
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f7fa fda1 	bl	8000550 <__aeabi_dmul>
 8005a0e:	4b37      	ldr	r3, [pc, #220]	; (8005aec <scalbn+0x104>)
 8005a10:	429e      	cmp	r6, r3
 8005a12:	4604      	mov	r4, r0
 8005a14:	460d      	mov	r5, r1
 8005a16:	da10      	bge.n	8005a3a <scalbn+0x52>
 8005a18:	a32b      	add	r3, pc, #172	; (adr r3, 8005ac8 <scalbn+0xe0>)
 8005a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1e:	e03a      	b.n	8005a96 <scalbn+0xae>
 8005a20:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005a24:	428a      	cmp	r2, r1
 8005a26:	d10c      	bne.n	8005a42 <scalbn+0x5a>
 8005a28:	ee10 2a10 	vmov	r2, s0
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	4629      	mov	r1, r5
 8005a30:	f7fa fbd8 	bl	80001e4 <__adddf3>
 8005a34:	4604      	mov	r4, r0
 8005a36:	460d      	mov	r5, r1
 8005a38:	e019      	b.n	8005a6e <scalbn+0x86>
 8005a3a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005a3e:	460b      	mov	r3, r1
 8005a40:	3a36      	subs	r2, #54	; 0x36
 8005a42:	4432      	add	r2, r6
 8005a44:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005a48:	428a      	cmp	r2, r1
 8005a4a:	dd08      	ble.n	8005a5e <scalbn+0x76>
 8005a4c:	2d00      	cmp	r5, #0
 8005a4e:	a120      	add	r1, pc, #128	; (adr r1, 8005ad0 <scalbn+0xe8>)
 8005a50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a54:	da1c      	bge.n	8005a90 <scalbn+0xa8>
 8005a56:	a120      	add	r1, pc, #128	; (adr r1, 8005ad8 <scalbn+0xf0>)
 8005a58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a5c:	e018      	b.n	8005a90 <scalbn+0xa8>
 8005a5e:	2a00      	cmp	r2, #0
 8005a60:	dd08      	ble.n	8005a74 <scalbn+0x8c>
 8005a62:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005a66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005a6a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005a6e:	ec45 4b10 	vmov	d0, r4, r5
 8005a72:	bd70      	pop	{r4, r5, r6, pc}
 8005a74:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005a78:	da19      	bge.n	8005aae <scalbn+0xc6>
 8005a7a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005a7e:	429e      	cmp	r6, r3
 8005a80:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005a84:	dd0a      	ble.n	8005a9c <scalbn+0xb4>
 8005a86:	a112      	add	r1, pc, #72	; (adr r1, 8005ad0 <scalbn+0xe8>)
 8005a88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1e2      	bne.n	8005a56 <scalbn+0x6e>
 8005a90:	a30f      	add	r3, pc, #60	; (adr r3, 8005ad0 <scalbn+0xe8>)
 8005a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a96:	f7fa fd5b 	bl	8000550 <__aeabi_dmul>
 8005a9a:	e7cb      	b.n	8005a34 <scalbn+0x4c>
 8005a9c:	a10a      	add	r1, pc, #40	; (adr r1, 8005ac8 <scalbn+0xe0>)
 8005a9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d0b8      	beq.n	8005a18 <scalbn+0x30>
 8005aa6:	a10e      	add	r1, pc, #56	; (adr r1, 8005ae0 <scalbn+0xf8>)
 8005aa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005aac:	e7b4      	b.n	8005a18 <scalbn+0x30>
 8005aae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005ab2:	3236      	adds	r2, #54	; 0x36
 8005ab4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ab8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005abc:	4620      	mov	r0, r4
 8005abe:	4b0c      	ldr	r3, [pc, #48]	; (8005af0 <scalbn+0x108>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	e7e8      	b.n	8005a96 <scalbn+0xae>
 8005ac4:	f3af 8000 	nop.w
 8005ac8:	c2f8f359 	.word	0xc2f8f359
 8005acc:	01a56e1f 	.word	0x01a56e1f
 8005ad0:	8800759c 	.word	0x8800759c
 8005ad4:	7e37e43c 	.word	0x7e37e43c
 8005ad8:	8800759c 	.word	0x8800759c
 8005adc:	fe37e43c 	.word	0xfe37e43c
 8005ae0:	c2f8f359 	.word	0xc2f8f359
 8005ae4:	81a56e1f 	.word	0x81a56e1f
 8005ae8:	43500000 	.word	0x43500000
 8005aec:	ffff3cb0 	.word	0xffff3cb0
 8005af0:	3c900000 	.word	0x3c900000

08005af4 <_init>:
 8005af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af6:	bf00      	nop
 8005af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005afa:	bc08      	pop	{r3}
 8005afc:	469e      	mov	lr, r3
 8005afe:	4770      	bx	lr

08005b00 <_fini>:
 8005b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b02:	bf00      	nop
 8005b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b06:	bc08      	pop	{r3}
 8005b08:	469e      	mov	lr, r3
 8005b0a:	4770      	bx	lr
